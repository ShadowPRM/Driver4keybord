
Driver4keybord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c88  08003c88  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c88  08003c88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08003d00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08003d00  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8cf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207c  00000000  00000000  0002e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  000309e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00031650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001816b  00000000  00000000  000321e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9f6  00000000  00000000  0004a34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b003  00000000  00000000  00058d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3d44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  000e3d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b9c 	.word	0x08003b9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003b9c 	.word	0x08003b9c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b3f      	ldr	r3, [pc, #252]	; (8000260 <MX_GPIO_Init+0x114>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a3e      	ldr	r2, [pc, #248]	; (8000260 <MX_GPIO_Init+0x114>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b3c      	ldr	r3, [pc, #240]	; (8000260 <MX_GPIO_Init+0x114>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b39      	ldr	r3, [pc, #228]	; (8000260 <MX_GPIO_Init+0x114>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a38      	ldr	r2, [pc, #224]	; (8000260 <MX_GPIO_Init+0x114>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b36      	ldr	r3, [pc, #216]	; (8000260 <MX_GPIO_Init+0x114>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b33      	ldr	r3, [pc, #204]	; (8000260 <MX_GPIO_Init+0x114>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a32      	ldr	r2, [pc, #200]	; (8000260 <MX_GPIO_Init+0x114>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b30      	ldr	r3, [pc, #192]	; (8000260 <MX_GPIO_Init+0x114>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a8:	4b2d      	ldr	r3, [pc, #180]	; (8000260 <MX_GPIO_Init+0x114>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a2c      	ldr	r2, [pc, #176]	; (8000260 <MX_GPIO_Init+0x114>)
 80001ae:	f043 0304 	orr.w	r3, r3, #4
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b2a      	ldr	r3, [pc, #168]	; (8000260 <MX_GPIO_Init+0x114>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0304 	and.w	r3, r3, #4
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedDbg_GPIO_Port, LedDbg_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4827      	ldr	r0, [pc, #156]	; (8000264 <MX_GPIO_Init+0x118>)
 80001c8:	f001 fa34 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adr2out2_GPIO_Port, adr2out2_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d2:	4825      	ldr	r0, [pc, #148]	; (8000268 <MX_GPIO_Init+0x11c>)
 80001d4:	f001 fa2e 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, adr1out1_Pin|adr0out0_Pin, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80001de:	4823      	ldr	r0, [pc, #140]	; (800026c <MX_GPIO_Init+0x120>)
 80001e0:	f001 fa28 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedDbg_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ea:	2301      	movs	r3, #1
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedDbg_GPIO_Port, &GPIO_InitStruct);
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	4619      	mov	r1, r3
 80001fc:	4819      	ldr	r0, [pc, #100]	; (8000264 <MX_GPIO_Init+0x118>)
 80001fe:	f001 f895 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = adr5in2_Pin|adr4in1_Pin|adr3in0_Pin;
 8000202:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000208:	2300      	movs	r3, #0
 800020a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800020c:	2301      	movs	r3, #1
 800020e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000210:	f107 0310 	add.w	r3, r7, #16
 8000214:	4619      	mov	r1, r3
 8000216:	4814      	ldr	r0, [pc, #80]	; (8000268 <MX_GPIO_Init+0x11c>)
 8000218:	f001 f888 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = adr2out2_Pin;
 800021c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000222:	2311      	movs	r3, #17
 8000224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000226:	2301      	movs	r3, #1
 8000228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022a:	2303      	movs	r3, #3
 800022c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(adr2out2_GPIO_Port, &GPIO_InitStruct);
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	4619      	mov	r1, r3
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <MX_GPIO_Init+0x11c>)
 8000236:	f001 f879 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = adr1out1_Pin|adr0out0_Pin;
 800023a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800023e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000240:	2311      	movs	r3, #17
 8000242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000244:	2301      	movs	r3, #1
 8000246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000248:	2303      	movs	r3, #3
 800024a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800024c:	f107 0310 	add.w	r3, r7, #16
 8000250:	4619      	mov	r1, r3
 8000252:	4806      	ldr	r0, [pc, #24]	; (800026c <MX_GPIO_Init+0x120>)
 8000254:	f001 f86a 	bl	800132c <HAL_GPIO_Init>

}
 8000258:	bf00      	nop
 800025a:	3720      	adds	r7, #32
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40021000 	.word	0x40021000
 8000264:	40011000 	.word	0x40011000
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40010800 	.word	0x40010800

08000270 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1){		// каждые 10мс
		//для отладки
	}
	if(htim->Instance==TIM2){		// каждые 10мкс
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000280:	d127      	bne.n	80002d2 <HAL_TIM_PeriodElapsedCallback+0x62>
		countPovtorPrint++;
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800028a:	6013      	str	r3, [r2, #0]
		countPresKey1++;
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000294:	6013      	str	r3, [r2, #0]
		countPresKey2++;
 8000296:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	3301      	adds	r3, #1
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800029e:	6013      	str	r3, [r2, #0]
		if (adrOprosa) {oprosStart=1;} else {countOprKB++;}
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <HAL_TIM_PeriodElapsedCallback+0x42>
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	e004      	b.n	80002bc <HAL_TIM_PeriodElapsedCallback+0x4c>
 80002b2:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3301      	adds	r3, #1
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002ba:	6013      	str	r3, [r2, #0]
		if (countOprKB>=PER_OPR_KB) {oprosStart=1; countOprKB=0;}
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002c4:	d305      	bcc.n	80002d2 <HAL_TIM_PeriodElapsedCallback+0x62>
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance==TIM3){
		//для отладки
	}
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	200000a0 	.word	0x200000a0
 80002e0:	200000a4 	.word	0x200000a4
 80002e4:	200000a8 	.word	0x200000a8
 80002e8:	20000090 	.word	0x20000090
 80002ec:	20000091 	.word	0x20000091
 80002f0:	2000009c 	.word	0x2000009c

080002f4 <OprosKeybord>:


uint8_t OprosKeybord (uint8_t adres){
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	uint8_t  key1=0;
 80002fe:	2300      	movs	r3, #0
 8000300:	73fb      	strb	r3, [r7, #15]
	uint8_t  key2=0;
 8000302:	2300      	movs	r3, #0
 8000304:	73bb      	strb	r3, [r7, #14]
	uint8_t  key3=0;
 8000306:	2300      	movs	r3, #0
 8000308:	737b      	strb	r3, [r7, #13]

	if (!(adres & 0x01)){
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d136      	bne.n	8000382 <OprosKeybord+0x8e>
		//Установка кода на HC138 для опроса клавиш (активное состояние л0!)
		if (adres&(1<<1)) {adr0out0_GPIO_Port->ODR |= adr0out0_Pin;} else {adr0out0_GPIO_Port->ODR &=~ adr0out0_Pin;}
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	f003 0302 	and.w	r3, r3, #2
 800031a:	2b00      	cmp	r3, #0
 800031c:	d006      	beq.n	800032c <OprosKeybord+0x38>
 800031e:	4b95      	ldr	r3, [pc, #596]	; (8000574 <OprosKeybord+0x280>)
 8000320:	68db      	ldr	r3, [r3, #12]
 8000322:	4a94      	ldr	r2, [pc, #592]	; (8000574 <OprosKeybord+0x280>)
 8000324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000328:	60d3      	str	r3, [r2, #12]
 800032a:	e005      	b.n	8000338 <OprosKeybord+0x44>
 800032c:	4b91      	ldr	r3, [pc, #580]	; (8000574 <OprosKeybord+0x280>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4a90      	ldr	r2, [pc, #576]	; (8000574 <OprosKeybord+0x280>)
 8000332:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000336:	60d3      	str	r3, [r2, #12]
		if (adres&(1<<2)) {adr1out1_GPIO_Port->ODR |= adr1out1_Pin;} else {adr1out1_GPIO_Port->ODR &=~ adr1out1_Pin;}
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	2b00      	cmp	r3, #0
 8000340:	d006      	beq.n	8000350 <OprosKeybord+0x5c>
 8000342:	4b8c      	ldr	r3, [pc, #560]	; (8000574 <OprosKeybord+0x280>)
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	4a8b      	ldr	r2, [pc, #556]	; (8000574 <OprosKeybord+0x280>)
 8000348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800034c:	60d3      	str	r3, [r2, #12]
 800034e:	e005      	b.n	800035c <OprosKeybord+0x68>
 8000350:	4b88      	ldr	r3, [pc, #544]	; (8000574 <OprosKeybord+0x280>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a87      	ldr	r2, [pc, #540]	; (8000574 <OprosKeybord+0x280>)
 8000356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800035a:	60d3      	str	r3, [r2, #12]
		if (adres&(1<<3)) {adr2out2_GPIO_Port->ODR |= adr2out2_Pin;} else {adr2out2_GPIO_Port->ODR &=~ adr2out2_Pin;}
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	f003 0308 	and.w	r3, r3, #8
 8000362:	2b00      	cmp	r3, #0
 8000364:	d006      	beq.n	8000374 <OprosKeybord+0x80>
 8000366:	4b84      	ldr	r3, [pc, #528]	; (8000578 <OprosKeybord+0x284>)
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	4a83      	ldr	r2, [pc, #524]	; (8000578 <OprosKeybord+0x284>)
 800036c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000370:	60d3      	str	r3, [r2, #12]
 8000372:	e0f7      	b.n	8000564 <OprosKeybord+0x270>
 8000374:	4b80      	ldr	r3, [pc, #512]	; (8000578 <OprosKeybord+0x284>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a7f      	ldr	r2, [pc, #508]	; (8000578 <OprosKeybord+0x284>)
 800037a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800037e:	60d3      	str	r3, [r2, #12]
 8000380:	e0f0      	b.n	8000564 <OprosKeybord+0x270>
	}
	else {
		//Проверка состояния входов (проверяем л0)
		adres=adres>>1;
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	085b      	lsrs	r3, r3, #1
 8000386:	71fb      	strb	r3, [r7, #7]
		if (adr3in0_GPIO_Port->IDR & adr3in0_Pin)	{key1 &=~ (1<<3); keyKeybord &=~ (1<<(0+adres));}
 8000388:	4b7b      	ldr	r3, [pc, #492]	; (8000578 <OprosKeybord+0x284>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000390:	2b00      	cmp	r3, #0
 8000392:	d00f      	beq.n	80003b4 <OprosKeybord+0xc0>
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	f023 0308 	bic.w	r3, r3, #8
 800039a:	73fb      	strb	r3, [r7, #15]
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	2201      	movs	r2, #1
 80003a0:	fa02 f303 	lsl.w	r3, r2, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b74      	ldr	r3, [pc, #464]	; (800057c <OprosKeybord+0x288>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4013      	ands	r3, r2
 80003ae:	4a73      	ldr	r2, [pc, #460]	; (800057c <OprosKeybord+0x288>)
 80003b0:	6013      	str	r3, [r2, #0]
 80003b2:	e00d      	b.n	80003d0 <OprosKeybord+0xdc>
		else										{key1 |= (1<<3);  keyKeybord |= (1<<(0+adres)); }
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	73fb      	strb	r3, [r7, #15]
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2201      	movs	r2, #1
 80003c0:	fa02 f303 	lsl.w	r3, r2, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b6d      	ldr	r3, [pc, #436]	; (800057c <OprosKeybord+0x288>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4313      	orrs	r3, r2
 80003cc:	4a6b      	ldr	r2, [pc, #428]	; (800057c <OprosKeybord+0x288>)
 80003ce:	6013      	str	r3, [r2, #0]

		if (adr4in1_GPIO_Port->IDR & adr4in1_Pin)	{key2 &=~ (1<<4); keyKeybord &=~ (1<<(1+adres));}
 80003d0:	4b69      	ldr	r3, [pc, #420]	; (8000578 <OprosKeybord+0x284>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d010      	beq.n	80003fe <OprosKeybord+0x10a>
 80003dc:	7bbb      	ldrb	r3, [r7, #14]
 80003de:	f023 0310 	bic.w	r3, r3, #16
 80003e2:	73bb      	strb	r3, [r7, #14]
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	3301      	adds	r3, #1
 80003e8:	2201      	movs	r2, #1
 80003ea:	fa02 f303 	lsl.w	r3, r2, r3
 80003ee:	43db      	mvns	r3, r3
 80003f0:	461a      	mov	r2, r3
 80003f2:	4b62      	ldr	r3, [pc, #392]	; (800057c <OprosKeybord+0x288>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4013      	ands	r3, r2
 80003f8:	4a60      	ldr	r2, [pc, #384]	; (800057c <OprosKeybord+0x288>)
 80003fa:	6013      	str	r3, [r2, #0]
 80003fc:	e00e      	b.n	800041c <OprosKeybord+0x128>
		else										{key2 |= (1<<4);  keyKeybord |= (1<<(1+adres));}
 80003fe:	7bbb      	ldrb	r3, [r7, #14]
 8000400:	f043 0310 	orr.w	r3, r3, #16
 8000404:	73bb      	strb	r3, [r7, #14]
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	3301      	adds	r3, #1
 800040a:	2201      	movs	r2, #1
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	461a      	mov	r2, r3
 8000412:	4b5a      	ldr	r3, [pc, #360]	; (800057c <OprosKeybord+0x288>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4313      	orrs	r3, r2
 8000418:	4a58      	ldr	r2, [pc, #352]	; (800057c <OprosKeybord+0x288>)
 800041a:	6013      	str	r3, [r2, #0]

		if (adr5in2_GPIO_Port->IDR & adr5in2_Pin)	{key3 &=~ (1<<5); keyKeybord &=~ (1<<(2+adres));}
 800041c:	4b56      	ldr	r3, [pc, #344]	; (8000578 <OprosKeybord+0x284>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000424:	2b00      	cmp	r3, #0
 8000426:	d010      	beq.n	800044a <OprosKeybord+0x156>
 8000428:	7b7b      	ldrb	r3, [r7, #13]
 800042a:	f023 0320 	bic.w	r3, r3, #32
 800042e:	737b      	strb	r3, [r7, #13]
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	3302      	adds	r3, #2
 8000434:	2201      	movs	r2, #1
 8000436:	fa02 f303 	lsl.w	r3, r2, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	461a      	mov	r2, r3
 800043e:	4b4f      	ldr	r3, [pc, #316]	; (800057c <OprosKeybord+0x288>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4013      	ands	r3, r2
 8000444:	4a4d      	ldr	r2, [pc, #308]	; (800057c <OprosKeybord+0x288>)
 8000446:	6013      	str	r3, [r2, #0]
 8000448:	e00e      	b.n	8000468 <OprosKeybord+0x174>
		else										{key3 |= (1<<5);  keyKeybord |= (1<<(2+adres));}
 800044a:	7b7b      	ldrb	r3, [r7, #13]
 800044c:	f043 0320 	orr.w	r3, r3, #32
 8000450:	737b      	strb	r3, [r7, #13]
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	3302      	adds	r3, #2
 8000456:	2201      	movs	r2, #1
 8000458:	fa02 f303 	lsl.w	r3, r2, r3
 800045c:	461a      	mov	r2, r3
 800045e:	4b47      	ldr	r3, [pc, #284]	; (800057c <OprosKeybord+0x288>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4313      	orrs	r3, r2
 8000464:	4a45      	ldr	r2, [pc, #276]	; (800057c <OprosKeybord+0x288>)
 8000466:	6013      	str	r3, [r2, #0]

		//проверка 3х нажатых в одном столбце
		if (key1 && key2 && key3) {key1=0;key2=0;key3=0; numKey1=0; numKey2=0;  return (0xfe);}
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d013      	beq.n	8000496 <OprosKeybord+0x1a2>
 800046e:	7bbb      	ldrb	r3, [r7, #14]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d010      	beq.n	8000496 <OprosKeybord+0x1a2>
 8000474:	7b7b      	ldrb	r3, [r7, #13]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d00d      	beq.n	8000496 <OprosKeybord+0x1a2>
 800047a:	2300      	movs	r3, #0
 800047c:	73fb      	strb	r3, [r7, #15]
 800047e:	2300      	movs	r3, #0
 8000480:	73bb      	strb	r3, [r7, #14]
 8000482:	2300      	movs	r3, #0
 8000484:	737b      	strb	r3, [r7, #13]
 8000486:	4b3e      	ldr	r3, [pc, #248]	; (8000580 <OprosKeybord+0x28c>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]
 800048c:	4b3d      	ldr	r3, [pc, #244]	; (8000584 <OprosKeybord+0x290>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	23fe      	movs	r3, #254	; 0xfe
 8000494:	e068      	b.n	8000568 <OprosKeybord+0x274>

		//проверка 3х нажатых в общем опросе клавы
		if (numKey1 && numKey2 && (key1|key2|key3)) {key1=0;key2=0;key3=0; numKey1=0; numKey2=0;  return (0xff);}
 8000496:	4b3a      	ldr	r3, [pc, #232]	; (8000580 <OprosKeybord+0x28c>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d01a      	beq.n	80004d4 <OprosKeybord+0x1e0>
 800049e:	4b39      	ldr	r3, [pc, #228]	; (8000584 <OprosKeybord+0x290>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d016      	beq.n	80004d4 <OprosKeybord+0x1e0>
 80004a6:	7bfa      	ldrb	r2, [r7, #15]
 80004a8:	7bbb      	ldrb	r3, [r7, #14]
 80004aa:	4313      	orrs	r3, r2
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	7b7b      	ldrb	r3, [r7, #13]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d00d      	beq.n	80004d4 <OprosKeybord+0x1e0>
 80004b8:	2300      	movs	r3, #0
 80004ba:	73fb      	strb	r3, [r7, #15]
 80004bc:	2300      	movs	r3, #0
 80004be:	73bb      	strb	r3, [r7, #14]
 80004c0:	2300      	movs	r3, #0
 80004c2:	737b      	strb	r3, [r7, #13]
 80004c4:	4b2e      	ldr	r3, [pc, #184]	; (8000580 <OprosKeybord+0x28c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
 80004ca:	4b2e      	ldr	r3, [pc, #184]	; (8000584 <OprosKeybord+0x290>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
 80004d0:	23ff      	movs	r3, #255	; 0xff
 80004d2:	e049      	b.n	8000568 <OprosKeybord+0x274>

		//присвоение
		if (!(numKey1)) {
 80004d4:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <OprosKeybord+0x28c>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d122      	bne.n	8000522 <OprosKeybord+0x22e>
			if(key1) {numKey1=key1|adres; key1=0;} else if(key2) {numKey1=key2|adres; key2=0;} else if(key3) {numKey1=key3|adres; key3=0;}
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d008      	beq.n	80004f4 <OprosKeybord+0x200>
 80004e2:	7bfa      	ldrb	r2, [r7, #15]
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b25      	ldr	r3, [pc, #148]	; (8000580 <OprosKeybord+0x28c>)
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e016      	b.n	8000522 <OprosKeybord+0x22e>
 80004f4:	7bbb      	ldrb	r3, [r7, #14]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d008      	beq.n	800050c <OprosKeybord+0x218>
 80004fa:	7bba      	ldrb	r2, [r7, #14]
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	4313      	orrs	r3, r2
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <OprosKeybord+0x28c>)
 8000504:	701a      	strb	r2, [r3, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	73bb      	strb	r3, [r7, #14]
 800050a:	e00a      	b.n	8000522 <OprosKeybord+0x22e>
 800050c:	7b7b      	ldrb	r3, [r7, #13]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d007      	beq.n	8000522 <OprosKeybord+0x22e>
 8000512:	7b7a      	ldrb	r2, [r7, #13]
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	4313      	orrs	r3, r2
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <OprosKeybord+0x28c>)
 800051c:	701a      	strb	r2, [r3, #0]
 800051e:	2300      	movs	r3, #0
 8000520:	737b      	strb	r3, [r7, #13]
		}
		if (!(numKey2)) {
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <OprosKeybord+0x290>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d11c      	bne.n	8000564 <OprosKeybord+0x270>
			if(key1) {numKey2=key1|adres;} else if(key2) {numKey2=key2|adres;} else if(key3) {numKey2=key3|adres;}
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d006      	beq.n	800053e <OprosKeybord+0x24a>
 8000530:	7bfa      	ldrb	r2, [r7, #15]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4313      	orrs	r3, r2
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <OprosKeybord+0x290>)
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	e012      	b.n	8000564 <OprosKeybord+0x270>
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d006      	beq.n	8000552 <OprosKeybord+0x25e>
 8000544:	7bba      	ldrb	r2, [r7, #14]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4313      	orrs	r3, r2
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <OprosKeybord+0x290>)
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	e008      	b.n	8000564 <OprosKeybord+0x270>
 8000552:	7b7b      	ldrb	r3, [r7, #13]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d005      	beq.n	8000564 <OprosKeybord+0x270>
 8000558:	7b7a      	ldrb	r2, [r7, #13]
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4313      	orrs	r3, r2
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <OprosKeybord+0x290>)
 8000562:	701a      	strb	r2, [r3, #0]
		}
	}
	//возвращаем пустышку или вон аварийную ситуацию
	return (kolKeyOn);
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <OprosKeybord+0x294>)
 8000566:	781b      	ldrb	r3, [r3, #0]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40010800 	.word	0x40010800
 8000578:	40010c00 	.word	0x40010c00
 800057c:	2000008c 	.word	0x2000008c
 8000580:	200000ac 	.word	0x200000ac
 8000584:	200000ad 	.word	0x200000ad
 8000588:	200000b0 	.word	0x200000b0

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b092      	sub	sp, #72	; 0x48
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fc85 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f983 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f7ff fdd7 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 800059e:	f000 fa87 	bl	8000ab0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005a2:	f000 fad5 	bl	8000b50 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005a6:	f000 fbc9 	bl	8000d3c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80005aa:	f000 fb1d 	bl	8000be8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005ae:	48a3      	ldr	r0, [pc, #652]	; (800083c <main+0x2b0>)
 80005b0:	f001 fcb6 	bl	8001f20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80005b4:	48a2      	ldr	r0, [pc, #648]	; (8000840 <main+0x2b4>)
 80005b6:	f001 fcb3 	bl	8001f20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80005ba:	48a2      	ldr	r0, [pc, #648]	; (8000844 <main+0x2b8>)
 80005bc:	f001 fcb0 	bl	8001f20 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1){
	uint16_t sizeString=0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	uint8_t kolNaj=0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char uartBuf [64]={0,};
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	223c      	movs	r2, #60	; 0x3c
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fe9d 	bl	8003318 <memset>
	 * (вприципе можно поднять частоту опроса)
	 */

	// Опрашиваем клавиатуру 8 раз по 3 кнопки (фиксируем нажатые кнопки),
	// но чтоб чётко выставился адрес вставлю доп обращения
	if (oprosStart){
 80005de:	4b9a      	ldr	r3, [pc, #616]	; (8000848 <main+0x2bc>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d01d      	beq.n	8000624 <main+0x98>
		kolNaj = OprosKeybord(adrOprosa);
 80005e8:	4b98      	ldr	r3, [pc, #608]	; (800084c <main+0x2c0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe80 	bl	80002f4 <OprosKeybord>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		adrOprosa++;
 80005fa:	4b94      	ldr	r3, [pc, #592]	; (800084c <main+0x2c0>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	3301      	adds	r3, #1
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b91      	ldr	r3, [pc, #580]	; (800084c <main+0x2c0>)
 8000606:	701a      	strb	r2, [r3, #0]
		//у HC 8 состояний выхода (в каждом по 3 кнопки)
		if (adrOprosa>=16){adrOprosa=0; oprosKB=1;}
 8000608:	4b90      	ldr	r3, [pc, #576]	; (800084c <main+0x2c0>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b0f      	cmp	r3, #15
 8000610:	d905      	bls.n	800061e <main+0x92>
 8000612:	4b8e      	ldr	r3, [pc, #568]	; (800084c <main+0x2c0>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	4b8d      	ldr	r3, [pc, #564]	; (8000850 <main+0x2c4>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		oprosStart=0;
 800061e:	4b8a      	ldr	r3, [pc, #552]	; (8000848 <main+0x2bc>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
	}

	//фиксация кнопок
	if (oprosKB){
 8000624:	4b8a      	ldr	r3, [pc, #552]	; (8000850 <main+0x2c4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d034      	beq.n	8000698 <main+0x10c>
		if (numKey1!=najKey1) {najKey1=numKey1; countPresKey1=0; printLong=0; key1NormPress=0; key1LongPress=0;}
 800062e:	4b89      	ldr	r3, [pc, #548]	; (8000854 <main+0x2c8>)
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	4b89      	ldr	r3, [pc, #548]	; (8000858 <main+0x2cc>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	d00f      	beq.n	800065a <main+0xce>
 800063a:	4b86      	ldr	r3, [pc, #536]	; (8000854 <main+0x2c8>)
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	4b86      	ldr	r3, [pc, #536]	; (8000858 <main+0x2cc>)
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	4b86      	ldr	r3, [pc, #536]	; (800085c <main+0x2d0>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	4b85      	ldr	r3, [pc, #532]	; (8000860 <main+0x2d4>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	4b85      	ldr	r3, [pc, #532]	; (8000864 <main+0x2d8>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	4b84      	ldr	r3, [pc, #528]	; (8000868 <main+0x2dc>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
		if (numKey2!=najKey2) {najKey2=numKey2; countPresKey2=0; printLong=0; key2NormPress=0; key2LongPress=0;}
 800065a:	4b84      	ldr	r3, [pc, #528]	; (800086c <main+0x2e0>)
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	4b84      	ldr	r3, [pc, #528]	; (8000870 <main+0x2e4>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d00f      	beq.n	8000686 <main+0xfa>
 8000666:	4b81      	ldr	r3, [pc, #516]	; (800086c <main+0x2e0>)
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	4b81      	ldr	r3, [pc, #516]	; (8000870 <main+0x2e4>)
 800066c:	701a      	strb	r2, [r3, #0]
 800066e:	4b81      	ldr	r3, [pc, #516]	; (8000874 <main+0x2e8>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	4b7a      	ldr	r3, [pc, #488]	; (8000860 <main+0x2d4>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	4b7f      	ldr	r3, [pc, #508]	; (8000878 <main+0x2ec>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	4b7e      	ldr	r3, [pc, #504]	; (800087c <main+0x2f0>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
		numKey1=0; numKey2=0;
 8000686:	4b73      	ldr	r3, [pc, #460]	; (8000854 <main+0x2c8>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	4b77      	ldr	r3, [pc, #476]	; (800086c <main+0x2e0>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		oprosKB=0;
 8000692:	4b6f      	ldr	r3, [pc, #444]	; (8000850 <main+0x2c4>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	//фиксация длительного нажатия
	if (!key1LongPress && najKey1 && (countPresKey1>=VREM_FIX_PRKEY)){
 8000698:	4b73      	ldr	r3, [pc, #460]	; (8000868 <main+0x2dc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	f083 0301 	eor.w	r3, r3, #1
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d011      	beq.n	80006ca <main+0x13e>
 80006a6:	4b6c      	ldr	r3, [pc, #432]	; (8000858 <main+0x2cc>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00d      	beq.n	80006ca <main+0x13e>
 80006ae:	4b6b      	ldr	r3, [pc, #428]	; (800085c <main+0x2d0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a73      	ldr	r2, [pc, #460]	; (8000880 <main+0x2f4>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d908      	bls.n	80006ca <main+0x13e>
		printLong=1; countPovtorPrint=0;
 80006b8:	4b69      	ldr	r3, [pc, #420]	; (8000860 <main+0x2d4>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
 80006be:	4b71      	ldr	r3, [pc, #452]	; (8000884 <main+0x2f8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
		key1LongPress=1;
 80006c4:	4b68      	ldr	r3, [pc, #416]	; (8000868 <main+0x2dc>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
	}
	if (!key2LongPress && najKey2 && (countPresKey2>=VREM_FIX_PRKEY)){
 80006ca:	4b6c      	ldr	r3, [pc, #432]	; (800087c <main+0x2f0>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	f083 0301 	eor.w	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d011      	beq.n	80006fc <main+0x170>
 80006d8:	4b65      	ldr	r3, [pc, #404]	; (8000870 <main+0x2e4>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00d      	beq.n	80006fc <main+0x170>
 80006e0:	4b64      	ldr	r3, [pc, #400]	; (8000874 <main+0x2e8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a66      	ldr	r2, [pc, #408]	; (8000880 <main+0x2f4>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d908      	bls.n	80006fc <main+0x170>
		printLong=1; countPovtorPrint=0;
 80006ea:	4b5d      	ldr	r3, [pc, #372]	; (8000860 <main+0x2d4>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	4b64      	ldr	r3, [pc, #400]	; (8000884 <main+0x2f8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
		key2LongPress=1;
 80006f6:	4b61      	ldr	r3, [pc, #388]	; (800087c <main+0x2f0>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
	}

	//фиксация обычного нажатия
	if (!key1NormPress && najKey1 && (countPresKey1>=VREM_FIX_KEY)){ //
 80006fc:	4b59      	ldr	r3, [pc, #356]	; (8000864 <main+0x2d8>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f083 0301 	eor.w	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d00f      	beq.n	800072a <main+0x19e>
 800070a:	4b53      	ldr	r3, [pc, #332]	; (8000858 <main+0x2cc>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d00b      	beq.n	800072a <main+0x19e>
 8000712:	4b52      	ldr	r3, [pc, #328]	; (800085c <main+0x2d0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f242 720f 	movw	r2, #9999	; 0x270f
 800071a:	4293      	cmp	r3, r2
 800071c:	d905      	bls.n	800072a <main+0x19e>
		key1NormPress=1;
 800071e:	4b51      	ldr	r3, [pc, #324]	; (8000864 <main+0x2d8>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
		printNorm=1;
 8000724:	4b58      	ldr	r3, [pc, #352]	; (8000888 <main+0x2fc>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
	}
	if (!key2NormPress && najKey2 && (countPresKey2>=VREM_FIX_KEY)){
 800072a:	4b53      	ldr	r3, [pc, #332]	; (8000878 <main+0x2ec>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	f083 0301 	eor.w	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00f      	beq.n	8000758 <main+0x1cc>
 8000738:	4b4d      	ldr	r3, [pc, #308]	; (8000870 <main+0x2e4>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00b      	beq.n	8000758 <main+0x1cc>
 8000740:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <main+0x2e8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f242 720f 	movw	r2, #9999	; 0x270f
 8000748:	4293      	cmp	r3, r2
 800074a:	d905      	bls.n	8000758 <main+0x1cc>
		key2NormPress=1;
 800074c:	4b4a      	ldr	r3, [pc, #296]	; (8000878 <main+0x2ec>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
		printNorm=1;
 8000752:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <main+0x2fc>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
	}

	//вывод(печать)
	if (kolNaj == 0xfe){
 8000758:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800075c:	2bfe      	cmp	r3, #254	; 0xfe
 800075e:	d115      	bne.n	800078c <main+0x200>
		sizeString=sprintf(uartBuf, "Eror: Over 2 key/ryad!\r\n");
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	494a      	ldr	r1, [pc, #296]	; (800088c <main+0x300>)
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fddf 	bl	8003328 <siprintf>
 800076a:	4603      	mov	r3, r0
 800076c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, sizeString,100);
 8000770:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000774:	1d39      	adds	r1, r7, #4
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	4845      	ldr	r0, [pc, #276]	; (8000890 <main+0x304>)
 800077a:	f001 ffcf 	bl	800271c <HAL_UART_Transmit>
		HAL_Delay(1000);
 800077e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000782:	f000 fbef 	bl	8000f64 <HAL_Delay>
		kolNaj=0;
 8000786:	2300      	movs	r3, #0
 8000788:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}
	if (kolNaj == 0xff){
 800078c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000790:	2bff      	cmp	r3, #255	; 0xff
 8000792:	d115      	bne.n	80007c0 <main+0x234>
		sizeString=sprintf(uartBuf, "Eror: Over 2 key/KB!\r\n");
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	493f      	ldr	r1, [pc, #252]	; (8000894 <main+0x308>)
 8000798:	4618      	mov	r0, r3
 800079a:	f002 fdc5 	bl	8003328 <siprintf>
 800079e:	4603      	mov	r3, r0
 80007a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, sizeString,100);
 80007a4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80007a8:	1d39      	adds	r1, r7, #4
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	4838      	ldr	r0, [pc, #224]	; (8000890 <main+0x304>)
 80007ae:	f001 ffb5 	bl	800271c <HAL_UART_Transmit>
		HAL_Delay(1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b6:	f000 fbd5 	bl	8000f64 <HAL_Delay>
		kolNaj=0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}
	if (printNorm){
 80007c0:	4b31      	ldr	r3, [pc, #196]	; (8000888 <main+0x2fc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d015      	beq.n	80007f4 <main+0x268>
		sizeString=sprintf(uartBuf, "Key1: % 3d\t\tKey2: % 3d\r\n", najKey1, najKey2);
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <main+0x2cc>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <main+0x2e4>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	1d38      	adds	r0, r7, #4
 80007d4:	4930      	ldr	r1, [pc, #192]	; (8000898 <main+0x30c>)
 80007d6:	f002 fda7 	bl	8003328 <siprintf>
 80007da:	4603      	mov	r3, r0
 80007dc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, sizeString,30);
 80007e0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80007e4:	1d39      	adds	r1, r7, #4
 80007e6:	231e      	movs	r3, #30
 80007e8:	4829      	ldr	r0, [pc, #164]	; (8000890 <main+0x304>)
 80007ea:	f001 ff97 	bl	800271c <HAL_UART_Transmit>
		printNorm=0;
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <main+0x2fc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
	}
	if ((printLong)&&(countPovtorPrint>=VREM_POVTOR_KEY)) {	//countLongKey
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <main+0x2d4>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f43f aee1 	beq.w	80005c0 <main+0x34>
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <main+0x2f8>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000806:	4293      	cmp	r3, r2
 8000808:	f67f aeda 	bls.w	80005c0 <main+0x34>
		sizeString=sprintf(uartBuf, "LongKey1: % 3d\t\tLongKey2: % 3d\r\n", najKey1, najKey2);
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <main+0x2cc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <main+0x2e4>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	1d38      	adds	r0, r7, #4
 8000818:	4920      	ldr	r1, [pc, #128]	; (800089c <main+0x310>)
 800081a:	f002 fd85 	bl	8003328 <siprintf>
 800081e:	4603      	mov	r3, r0
 8000820:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, sizeString,30);
 8000824:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000828:	1d39      	adds	r1, r7, #4
 800082a:	231e      	movs	r3, #30
 800082c:	4818      	ldr	r0, [pc, #96]	; (8000890 <main+0x304>)
 800082e:	f001 ff75 	bl	800271c <HAL_UART_Transmit>
		countPovtorPrint=0;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <main+0x2f8>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
while (1){
 8000838:	e6c2      	b.n	80005c0 <main+0x34>
 800083a:	bf00      	nop
 800083c:	20000108 	.word	0x20000108
 8000840:	20000150 	.word	0x20000150
 8000844:	200000c0 	.word	0x200000c0
 8000848:	20000091 	.word	0x20000091
 800084c:	20000090 	.word	0x20000090
 8000850:	20000092 	.word	0x20000092
 8000854:	200000ac 	.word	0x200000ac
 8000858:	200000ae 	.word	0x200000ae
 800085c:	200000a4 	.word	0x200000a4
 8000860:	20000098 	.word	0x20000098
 8000864:	20000096 	.word	0x20000096
 8000868:	20000094 	.word	0x20000094
 800086c:	200000ad 	.word	0x200000ad
 8000870:	200000af 	.word	0x200000af
 8000874:	200000a8 	.word	0x200000a8
 8000878:	20000097 	.word	0x20000097
 800087c:	20000095 	.word	0x20000095
 8000880:	000493df 	.word	0x000493df
 8000884:	200000a0 	.word	0x200000a0
 8000888:	20000093 	.word	0x20000093
 800088c:	08003bb4 	.word	0x08003bb4
 8000890:	20000198 	.word	0x20000198
 8000894:	08003bd0 	.word	0x08003bd0
 8000898:	08003be8 	.word	0x08003be8
 800089c:	08003c04 	.word	0x08003c04

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2228      	movs	r2, #40	; 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fd32 	bl	8003318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 febb 	bl	8001664 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008f4:	f000 f819 	bl	800092a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2102      	movs	r1, #2
 8000912:	4618      	mov	r0, r3
 8000914:	f001 f926 	bl	8001b64 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800091e:	f000 f804 	bl	800092a <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3740      	adds	r7, #64	; 0x40
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092e:	b672      	cpsid	i
}
 8000930:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000932:	e7fe      	b.n	8000932 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_MspInit+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_MspInit+0x5c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_MspInit+0x60>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_MspInit+0x60>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 faa5 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <TIM1_UP_IRQHandler+0x10>)
 80009ee:	f001 fae9 	bl	8001fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000108 	.word	0x20000108

080009fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM2_IRQHandler+0x10>)
 8000a02:	f001 fadf 	bl	8001fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000150 	.word	0x20000150

08000a10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM3_IRQHandler+0x10>)
 8000a16:	f001 fad5 	bl	8001fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000c0 	.word	0x200000c0

08000a24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <USART1_IRQHandler+0x10>)
 8000a2a:	f001 fefb 	bl	8002824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000198 	.word	0x20000198

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f002 fc2c 	bl	80032c4 <__errno>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20005000 	.word	0x20005000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	200000b4 	.word	0x200000b4
 8000aa0:	200001f8 	.word	0x200001f8

08000aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <MX_TIM1_Init+0x9c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ad4:	2247      	movs	r2, #71	; 0x47
 8000ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ae0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af8:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000afa:	f001 f9c1 	bl	8001e80 <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b04:	f7ff ff11 	bl	800092a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000b16:	f001 fb5d 	bl	80021d4 <HAL_TIM_ConfigClockSource>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b20:	f7ff ff03 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000b32:	f001 fd33 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b3c:	f7ff fef5 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000108 	.word	0x20000108
 8000b4c:	40012c00 	.word	0x40012c00

08000b50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 719;
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b82:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b94:	4813      	ldr	r0, [pc, #76]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b96:	f001 f973 	bl	8001e80 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ba0:	f7ff fec3 	bl	800092a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000bb2:	f001 fb0f 	bl	80021d4 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bbc:	f7ff feb5 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000bce:	f001 fce5 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f7ff fea7 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000150 	.word	0x20000150

08000be8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_TIM3_Init+0x94>)
 8000c06:	4a1e      	ldr	r2, [pc, #120]	; (8000c80 <MX_TIM3_Init+0x98>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_TIM3_Init+0x94>)
 8000c0c:	2247      	movs	r2, #71	; 0x47
 8000c0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_TIM3_Init+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_TIM3_Init+0x94>)
 8000c18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_TIM3_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_TIM3_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_TIM3_Init+0x94>)
 8000c2c:	f001 f928 	bl	8001e80 <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c36:	f7ff fe78 	bl	800092a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_TIM3_Init+0x94>)
 8000c48:	f001 fac4 	bl	80021d4 <HAL_TIM_ConfigClockSource>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c52:	f7ff fe6a 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_TIM3_Init+0x94>)
 8000c64:	f001 fc9a 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c6e:	f7ff fe5c 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000c0 	.word	0x200000c0
 8000c80:	40000400 	.word	0x40000400

08000c84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <HAL_TIM_Base_MspInit+0xac>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d114      	bne.n	8000cc0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c96:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <HAL_TIM_Base_MspInit+0xb0>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a26      	ldr	r2, [pc, #152]	; (8000d34 <HAL_TIM_Base_MspInit+0xb0>)
 8000c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <HAL_TIM_Base_MspInit+0xb0>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2019      	movs	r0, #25
 8000cb4:	f000 fa51 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cb8:	2019      	movs	r0, #25
 8000cba:	f000 fa6a 	bl	8001192 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000cbe:	e032      	b.n	8000d26 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc8:	d114      	bne.n	8000cf4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_TIM_Base_MspInit+0xb0>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_TIM_Base_MspInit+0xb0>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_TIM_Base_MspInit+0xb0>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	201c      	movs	r0, #28
 8000ce8:	f000 fa37 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cec:	201c      	movs	r0, #28
 8000cee:	f000 fa50 	bl	8001192 <HAL_NVIC_EnableIRQ>
}
 8000cf2:	e018      	b.n	8000d26 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <HAL_TIM_Base_MspInit+0xb4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d113      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_TIM_Base_MspInit+0xb0>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a0c      	ldr	r2, [pc, #48]	; (8000d34 <HAL_TIM_Base_MspInit+0xb0>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_TIM_Base_MspInit+0xb0>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201d      	movs	r0, #29
 8000d1c:	f000 fa1d 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d20:	201d      	movs	r0, #29
 8000d22:	f000 fa36 	bl	8001192 <HAL_NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40012c00 	.word	0x40012c00
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40000400 	.word	0x40000400

08000d3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <MX_USART1_UART_Init+0x50>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d74:	f001 fc82 	bl	800267c <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d7e:	f7ff fdd4 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000198 	.word	0x20000198
 8000d8c:	40013800 	.word	0x40013800

08000d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <HAL_UART_MspInit+0xb4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d145      	bne.n	8000e3c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <HAL_UART_MspInit+0xb8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <HAL_UART_MspInit+0xb8>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <HAL_UART_MspInit+0xb8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_UART_MspInit+0xb8>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <HAL_UART_MspInit+0xb8>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_UART_MspInit+0xb8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4816      	ldr	r0, [pc, #88]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000df4:	f000 fa9a 	bl	800132c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4810      	ldr	r0, [pc, #64]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000e0c:	f000 fa8e 	bl	800132c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_UART_MspInit+0xc0>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_UART_MspInit+0xc0>)
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2025      	movs	r0, #37	; 0x25
 8000e32:	f000 f992 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e36:	2025      	movs	r0, #37	; 0x25
 8000e38:	f000 f9ab 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40013800 	.word	0x40013800
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	40010000 	.word	0x40010000

08000e54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e54:	f7ff fe26 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e5a:	490c      	ldr	r1, [pc, #48]	; (8000e8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e5c:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e70:	4c09      	ldr	r4, [pc, #36]	; (8000e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f002 fa27 	bl	80032d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e82:	f7ff fb83 	bl	800058c <main>
  bx lr
 8000e86:	4770      	bx	lr
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e90:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 8000e94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e98:	200001f4 	.word	0x200001f4

08000e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_2_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x28>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x28>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f947 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fd3a 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f95f 	bl	80011ae <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f927 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_IncTick+0x1c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_IncTick+0x20>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_IncTick+0x20>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200001e0 	.word	0x200001e0

08000f50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <HAL_GetTick+0x10>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	200001e0 	.word	0x200001e0

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff fff0 	bl	8000f50 <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffe0 	bl	8000f50 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4906      	ldr	r1, [pc, #24]	; (8001044 <__NVIC_EnableIRQ+0x34>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff90 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff2d 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff42 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff90 	bl	800109c <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5f 	bl	8001048 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff35 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffa2 	bl	8001100 <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d008      	beq.n	80011f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2204      	movs	r2, #4
 80011e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e020      	b.n	8001232 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 020e 	bic.w	r2, r2, #14
 80011fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d005      	beq.n	8001260 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2204      	movs	r2, #4
 8001258:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e051      	b.n	8001304 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 020e 	bic.w	r2, r2, #14
 800126e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a22      	ldr	r2, [pc, #136]	; (8001310 <HAL_DMA_Abort_IT+0xd4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d029      	beq.n	80012de <HAL_DMA_Abort_IT+0xa2>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a21      	ldr	r2, [pc, #132]	; (8001314 <HAL_DMA_Abort_IT+0xd8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d022      	beq.n	80012da <HAL_DMA_Abort_IT+0x9e>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_DMA_Abort_IT+0xdc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d01a      	beq.n	80012d4 <HAL_DMA_Abort_IT+0x98>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_DMA_Abort_IT+0xe0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d012      	beq.n	80012ce <HAL_DMA_Abort_IT+0x92>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <HAL_DMA_Abort_IT+0xe4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00a      	beq.n	80012c8 <HAL_DMA_Abort_IT+0x8c>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <HAL_DMA_Abort_IT+0xe8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d102      	bne.n	80012c2 <HAL_DMA_Abort_IT+0x86>
 80012bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012c0:	e00e      	b.n	80012e0 <HAL_DMA_Abort_IT+0xa4>
 80012c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012c6:	e00b      	b.n	80012e0 <HAL_DMA_Abort_IT+0xa4>
 80012c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012cc:	e008      	b.n	80012e0 <HAL_DMA_Abort_IT+0xa4>
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	e005      	b.n	80012e0 <HAL_DMA_Abort_IT+0xa4>
 80012d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d8:	e002      	b.n	80012e0 <HAL_DMA_Abort_IT+0xa4>
 80012da:	2310      	movs	r3, #16
 80012dc:	e000      	b.n	80012e0 <HAL_DMA_Abort_IT+0xa4>
 80012de:	2301      	movs	r3, #1
 80012e0:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_DMA_Abort_IT+0xec>)
 80012e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	4798      	blx	r3
    } 
  }
  return status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40020008 	.word	0x40020008
 8001314:	4002001c 	.word	0x4002001c
 8001318:	40020030 	.word	0x40020030
 800131c:	40020044 	.word	0x40020044
 8001320:	40020058 	.word	0x40020058
 8001324:	4002006c 	.word	0x4002006c
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b08b      	sub	sp, #44	; 0x2c
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e169      	b.n	8001614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001340:	2201      	movs	r2, #1
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8158 	bne.w	800160e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a9a      	ldr	r2, [pc, #616]	; (80015cc <HAL_GPIO_Init+0x2a0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d05e      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001368:	4a98      	ldr	r2, [pc, #608]	; (80015cc <HAL_GPIO_Init+0x2a0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d875      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800136e:	4a98      	ldr	r2, [pc, #608]	; (80015d0 <HAL_GPIO_Init+0x2a4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d058      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001374:	4a96      	ldr	r2, [pc, #600]	; (80015d0 <HAL_GPIO_Init+0x2a4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d86f      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800137a:	4a96      	ldr	r2, [pc, #600]	; (80015d4 <HAL_GPIO_Init+0x2a8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d052      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001380:	4a94      	ldr	r2, [pc, #592]	; (80015d4 <HAL_GPIO_Init+0x2a8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d869      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 8001386:	4a94      	ldr	r2, [pc, #592]	; (80015d8 <HAL_GPIO_Init+0x2ac>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d04c      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 800138c:	4a92      	ldr	r2, [pc, #584]	; (80015d8 <HAL_GPIO_Init+0x2ac>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d863      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 8001392:	4a92      	ldr	r2, [pc, #584]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d046      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001398:	4a90      	ldr	r2, [pc, #576]	; (80015dc <HAL_GPIO_Init+0x2b0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d85d      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d82a      	bhi.n	80013f8 <HAL_GPIO_Init+0xcc>
 80013a2:	2b12      	cmp	r3, #18
 80013a4:	d859      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <HAL_GPIO_Init+0x80>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	08001427 	.word	0x08001427
 80013b0:	08001401 	.word	0x08001401
 80013b4:	08001413 	.word	0x08001413
 80013b8:	08001455 	.word	0x08001455
 80013bc:	0800145b 	.word	0x0800145b
 80013c0:	0800145b 	.word	0x0800145b
 80013c4:	0800145b 	.word	0x0800145b
 80013c8:	0800145b 	.word	0x0800145b
 80013cc:	0800145b 	.word	0x0800145b
 80013d0:	0800145b 	.word	0x0800145b
 80013d4:	0800145b 	.word	0x0800145b
 80013d8:	0800145b 	.word	0x0800145b
 80013dc:	0800145b 	.word	0x0800145b
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	0800145b 	.word	0x0800145b
 80013e8:	0800145b 	.word	0x0800145b
 80013ec:	0800145b 	.word	0x0800145b
 80013f0:	08001409 	.word	0x08001409
 80013f4:	0800141d 	.word	0x0800141d
 80013f8:	4a79      	ldr	r2, [pc, #484]	; (80015e0 <HAL_GPIO_Init+0x2b4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fe:	e02c      	b.n	800145a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e029      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	3304      	adds	r3, #4
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e024      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	3308      	adds	r3, #8
 8001418:	623b      	str	r3, [r7, #32]
          break;
 800141a:	e01f      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	330c      	adds	r3, #12
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e01a      	b.n	800145c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800142e:	2304      	movs	r3, #4
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e013      	b.n	800145c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800143c:	2308      	movs	r3, #8
 800143e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	611a      	str	r2, [r3, #16]
          break;
 8001446:	e009      	b.n	800145c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001448:	2308      	movs	r3, #8
 800144a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	615a      	str	r2, [r3, #20]
          break;
 8001452:	e003      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e000      	b.n	800145c <HAL_GPIO_Init+0x130>
          break;
 800145a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2bff      	cmp	r3, #255	; 0xff
 8001460:	d801      	bhi.n	8001466 <HAL_GPIO_Init+0x13a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e001      	b.n	800146a <HAL_GPIO_Init+0x13e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3304      	adds	r3, #4
 800146a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2bff      	cmp	r3, #255	; 0xff
 8001470:	d802      	bhi.n	8001478 <HAL_GPIO_Init+0x14c>
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	e002      	b.n	800147e <HAL_GPIO_Init+0x152>
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	3b08      	subs	r3, #8
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	210f      	movs	r1, #15
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	6a39      	ldr	r1, [r7, #32]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	431a      	orrs	r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80b1 	beq.w	800160e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ac:	4b4d      	ldr	r3, [pc, #308]	; (80015e4 <HAL_GPIO_Init+0x2b8>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	; (80015e4 <HAL_GPIO_Init+0x2b8>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <HAL_GPIO_Init+0x2b8>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c4:	4a48      	ldr	r2, [pc, #288]	; (80015e8 <HAL_GPIO_Init+0x2bc>)
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a40      	ldr	r2, [pc, #256]	; (80015ec <HAL_GPIO_Init+0x2c0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d013      	beq.n	8001518 <HAL_GPIO_Init+0x1ec>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a3f      	ldr	r2, [pc, #252]	; (80015f0 <HAL_GPIO_Init+0x2c4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d00d      	beq.n	8001514 <HAL_GPIO_Init+0x1e8>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3e      	ldr	r2, [pc, #248]	; (80015f4 <HAL_GPIO_Init+0x2c8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d007      	beq.n	8001510 <HAL_GPIO_Init+0x1e4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a3d      	ldr	r2, [pc, #244]	; (80015f8 <HAL_GPIO_Init+0x2cc>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d101      	bne.n	800150c <HAL_GPIO_Init+0x1e0>
 8001508:	2303      	movs	r3, #3
 800150a:	e006      	b.n	800151a <HAL_GPIO_Init+0x1ee>
 800150c:	2304      	movs	r3, #4
 800150e:	e004      	b.n	800151a <HAL_GPIO_Init+0x1ee>
 8001510:	2302      	movs	r3, #2
 8001512:	e002      	b.n	800151a <HAL_GPIO_Init+0x1ee>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_GPIO_Init+0x1ee>
 8001518:	2300      	movs	r3, #0
 800151a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151c:	f002 0203 	and.w	r2, r2, #3
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	4093      	lsls	r3, r2
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800152a:	492f      	ldr	r1, [pc, #188]	; (80015e8 <HAL_GPIO_Init+0x2bc>)
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	492c      	ldr	r1, [pc, #176]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	608b      	str	r3, [r1, #8]
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	43db      	mvns	r3, r3
 800155a:	4928      	ldr	r1, [pc, #160]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 800155c:	4013      	ands	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	4922      	ldr	r1, [pc, #136]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	60cb      	str	r3, [r1, #12]
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	43db      	mvns	r3, r3
 8001582:	491e      	ldr	r1, [pc, #120]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 8001584:	4013      	ands	r3, r2
 8001586:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4918      	ldr	r1, [pc, #96]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	4914      	ldr	r1, [pc, #80]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d021      	beq.n	8001600 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
 80015c8:	e021      	b.n	800160e <HAL_GPIO_Init+0x2e2>
 80015ca:	bf00      	nop
 80015cc:	10320000 	.word	0x10320000
 80015d0:	10310000 	.word	0x10310000
 80015d4:	10220000 	.word	0x10220000
 80015d8:	10210000 	.word	0x10210000
 80015dc:	10120000 	.word	0x10120000
 80015e0:	10110000 	.word	0x10110000
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	40010800 	.word	0x40010800
 80015f0:	40010c00 	.word	0x40010c00
 80015f4:	40011000 	.word	0x40011000
 80015f8:	40011400 	.word	0x40011400
 80015fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_GPIO_Init+0x304>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	43db      	mvns	r3, r3
 8001608:	4909      	ldr	r1, [pc, #36]	; (8001630 <HAL_GPIO_Init+0x304>)
 800160a:	4013      	ands	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	3301      	adds	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	f47f ae8e 	bne.w	8001340 <HAL_GPIO_Init+0x14>
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	372c      	adds	r7, #44	; 0x2c
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	611a      	str	r2, [r3, #16]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e26c      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8087 	beq.w	8001792 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001684:	4b92      	ldr	r3, [pc, #584]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b04      	cmp	r3, #4
 800168e:	d00c      	beq.n	80016aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001690:	4b8f      	ldr	r3, [pc, #572]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b08      	cmp	r3, #8
 800169a:	d112      	bne.n	80016c2 <HAL_RCC_OscConfig+0x5e>
 800169c:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a8:	d10b      	bne.n	80016c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d06c      	beq.n	8001790 <HAL_RCC_OscConfig+0x12c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d168      	bne.n	8001790 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e246      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x76>
 80016cc:	4b80      	ldr	r3, [pc, #512]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a7f      	ldr	r2, [pc, #508]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e02e      	b.n	8001738 <HAL_RCC_OscConfig+0xd4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x98>
 80016e2:	4b7b      	ldr	r3, [pc, #492]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a7a      	ldr	r2, [pc, #488]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b78      	ldr	r3, [pc, #480]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a77      	ldr	r2, [pc, #476]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e01d      	b.n	8001738 <HAL_RCC_OscConfig+0xd4>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0xbc>
 8001706:	4b72      	ldr	r3, [pc, #456]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a71      	ldr	r2, [pc, #452]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800170c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a6e      	ldr	r2, [pc, #440]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e00b      	b.n	8001738 <HAL_RCC_OscConfig+0xd4>
 8001720:	4b6b      	ldr	r3, [pc, #428]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a6a      	ldr	r2, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a67      	ldr	r2, [pc, #412]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001736:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fc06 	bl	8000f50 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fc02 	bl	8000f50 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1fa      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0xe4>
 8001766:	e014      	b.n	8001792 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fbf2 	bl	8000f50 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fbee 	bl	8000f50 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1e6      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001782:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x10c>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d063      	beq.n	8001866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800179e:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017aa:	4b49      	ldr	r3, [pc, #292]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d11c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x18c>
 80017b6:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d116      	bne.n	80017f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_RCC_OscConfig+0x176>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e1ba      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4939      	ldr	r1, [pc, #228]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	e03a      	b.n	8001866 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <HAL_RCC_OscConfig+0x270>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fba7 	bl	8000f50 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001806:	f7ff fba3 	bl	8000f50 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e19b      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4927      	ldr	r1, [pc, #156]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x270>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fb86 	bl	8000f50 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001848:	f7ff fb82 	bl	8000f50 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e17a      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d03a      	beq.n	80018e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d019      	beq.n	80018ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff fb66 	bl	8000f50 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001888:	f7ff fb62 	bl	8000f50 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e15a      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 facc 	bl	8001e44 <RCC_Delay>
 80018ac:	e01c      	b.n	80018e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7ff fb4c 	bl	8000f50 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ba:	e00f      	b.n	80018dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018bc:	f7ff fb48 	bl	8000f50 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d908      	bls.n	80018dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e140      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	42420000 	.word	0x42420000
 80018d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	4b9e      	ldr	r3, [pc, #632]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e9      	bne.n	80018bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80a6 	beq.w	8001a42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fa:	4b97      	ldr	r3, [pc, #604]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10d      	bne.n	8001922 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b94      	ldr	r3, [pc, #592]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a93      	ldr	r2, [pc, #588]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b91      	ldr	r3, [pc, #580]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b8e      	ldr	r3, [pc, #568]	; (8001b5c <HAL_RCC_OscConfig+0x4f8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d118      	bne.n	8001960 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192e:	4b8b      	ldr	r3, [pc, #556]	; (8001b5c <HAL_RCC_OscConfig+0x4f8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a8a      	ldr	r2, [pc, #552]	; (8001b5c <HAL_RCC_OscConfig+0x4f8>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff fb09 	bl	8000f50 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff fb05 	bl	8000f50 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b64      	cmp	r3, #100	; 0x64
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0fd      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	4b81      	ldr	r3, [pc, #516]	; (8001b5c <HAL_RCC_OscConfig+0x4f8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x312>
 8001968:	4b7b      	ldr	r3, [pc, #492]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a7a      	ldr	r2, [pc, #488]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	e02d      	b.n	80019d2 <HAL_RCC_OscConfig+0x36e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x334>
 800197e:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4a75      	ldr	r2, [pc, #468]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6213      	str	r3, [r2, #32]
 800198a:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a72      	ldr	r2, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	6213      	str	r3, [r2, #32]
 8001996:	e01c      	b.n	80019d2 <HAL_RCC_OscConfig+0x36e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x356>
 80019a0:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a6c      	ldr	r2, [pc, #432]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6213      	str	r3, [r2, #32]
 80019ac:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a69      	ldr	r2, [pc, #420]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	e00b      	b.n	80019d2 <HAL_RCC_OscConfig+0x36e>
 80019ba:	4b67      	ldr	r3, [pc, #412]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a66      	ldr	r2, [pc, #408]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	4b64      	ldr	r3, [pc, #400]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a63      	ldr	r2, [pc, #396]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d015      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019da:	f7ff fab9 	bl	8000f50 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff fab5 	bl	8000f50 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0ab      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0ee      	beq.n	80019e2 <HAL_RCC_OscConfig+0x37e>
 8001a04:	e014      	b.n	8001a30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff faa3 	bl	8000f50 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff fa9f 	bl	8000f50 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e095      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d105      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a36:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a47      	ldr	r2, [pc, #284]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8081 	beq.w	8001b4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4c:	4b42      	ldr	r3, [pc, #264]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d061      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d146      	bne.n	8001aee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_OscConfig+0x4fc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fa73 	bl	8000f50 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff fa6f 	bl	8000f50 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e067      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a80:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d108      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a96:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	492d      	ldr	r1, [pc, #180]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a19      	ldr	r1, [r3, #32]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	4927      	ldr	r1, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <HAL_RCC_OscConfig+0x4fc>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fa43 	bl	8000f50 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff fa3f 	bl	8000f50 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e037      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x46a>
 8001aec:	e02f      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_RCC_OscConfig+0x4fc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fa2c 	bl	8000f50 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff fa28 	bl	8000f50 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e020      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x498>
 8001b1a:	e018      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e013      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	42420060 	.word	0x42420060

08001b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0d0      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b6a      	ldr	r3, [pc, #424]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d910      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b67      	ldr	r3, [pc, #412]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4965      	ldr	r1, [pc, #404]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0b8      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc0:	4b59      	ldr	r3, [pc, #356]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a58      	ldr	r2, [pc, #352]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd8:	4b53      	ldr	r3, [pc, #332]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4a52      	ldr	r2, [pc, #328]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be4:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	494d      	ldr	r1, [pc, #308]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d040      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d115      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e07f      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e073      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	4b3d      	ldr	r3, [pc, #244]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e06b      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4936      	ldr	r1, [pc, #216]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c54:	f7ff f97c 	bl	8000f50 <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff f978 	bl	8000f50 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e053      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d210      	bcs.n	8001cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	4922      	ldr	r1, [pc, #136]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e032      	b.n	8001d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4916      	ldr	r1, [pc, #88]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	490e      	ldr	r1, [pc, #56]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cf2:	f000 f821 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	490a      	ldr	r1, [pc, #40]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	5ccb      	ldrb	r3, [r1, r3]
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1cc>)
 8001d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1d0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f8da 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08003c28 	.word	0x08003c28
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000004 	.word	0x20000004

08001d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d52:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x30>
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x36>
 8001d66:	e027      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d6a:	613b      	str	r3, [r7, #16]
      break;
 8001d6c:	e027      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	0c9b      	lsrs	r3, r3, #18
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d010      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0c5b      	lsrs	r3, r3, #17
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9a:	fb02 f203 	mul.w	r2, r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e004      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	613b      	str	r3, [r7, #16]
      break;
 8001db6:	e002      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dba:	613b      	str	r3, [r7, #16]
      break;
 8001dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dbe:	693b      	ldr	r3, [r7, #16]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	007a1200 	.word	0x007a1200
 8001dd4:	08003c40 	.word	0x08003c40
 8001dd8:	08003c50 	.word	0x08003c50
 8001ddc:	003d0900 	.word	0x003d0900

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df8:	f7ff fff2 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08003c38 	.word	0x08003c38

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0adb      	lsrs	r3, r3, #11
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08003c38 	.word	0x08003c38

08001e44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <RCC_Delay+0x34>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <RCC_Delay+0x38>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0a5b      	lsrs	r3, r3, #9
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e60:	bf00      	nop
  }
  while (Delay --);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	60fa      	str	r2, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f9      	bne.n	8001e60 <RCC_Delay+0x1c>
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	10624dd3 	.word	0x10624dd3

08001e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e041      	b.n	8001f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe feec 	bl	8000c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f000 fa74 	bl	80023ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d001      	beq.n	8001f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e03a      	b.n	8001fae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_TIM_Base_Start_IT+0x98>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00e      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x58>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d009      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x58>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <HAL_TIM_Base_Start_IT+0x9c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x58>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d010      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f9a:	e007      	b.n	8001fac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800

08001fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d122      	bne.n	8002020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d11b      	bne.n	8002020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0202 	mvn.w	r2, #2
 8001ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f9b4 	bl	8002374 <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f9a7 	bl	8002362 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f9b6 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b04      	cmp	r3, #4
 800202c:	d122      	bne.n	8002074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b04      	cmp	r3, #4
 800203a:	d11b      	bne.n	8002074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0204 	mvn.w	r2, #4
 8002044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f98a 	bl	8002374 <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f97d 	bl	8002362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f98c 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b08      	cmp	r3, #8
 8002080:	d122      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b08      	cmp	r3, #8
 800208e:	d11b      	bne.n	80020c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0208 	mvn.w	r2, #8
 8002098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2204      	movs	r2, #4
 800209e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f960 	bl	8002374 <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f953 	bl	8002362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f962 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d122      	bne.n	800211c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d11b      	bne.n	800211c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0210 	mvn.w	r2, #16
 80020ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2208      	movs	r2, #8
 80020f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f936 	bl	8002374 <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f929 	bl	8002362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f938 	bl	8002386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d107      	bne.n	8002148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0201 	mvn.w	r2, #1
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe f894 	bl	8000270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b80      	cmp	r3, #128	; 0x80
 8002154:	d10e      	bne.n	8002174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002160:	2b80      	cmp	r3, #128	; 0x80
 8002162:	d107      	bne.n	8002174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa7b 	bl	800266a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b40      	cmp	r3, #64	; 0x40
 8002180:	d10e      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d107      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8fc 	bl	8002398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d107      	bne.n	80021cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0220 	mvn.w	r2, #32
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fa46 	bl	8002658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_TIM_ConfigClockSource+0x1c>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0b4      	b.n	800235a <HAL_TIM_ConfigClockSource+0x186>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800220e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002228:	d03e      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0xd4>
 800222a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222e:	f200 8087 	bhi.w	8002340 <HAL_TIM_ConfigClockSource+0x16c>
 8002232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002236:	f000 8086 	beq.w	8002346 <HAL_TIM_ConfigClockSource+0x172>
 800223a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223e:	d87f      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x16c>
 8002240:	2b70      	cmp	r3, #112	; 0x70
 8002242:	d01a      	beq.n	800227a <HAL_TIM_ConfigClockSource+0xa6>
 8002244:	2b70      	cmp	r3, #112	; 0x70
 8002246:	d87b      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x16c>
 8002248:	2b60      	cmp	r3, #96	; 0x60
 800224a:	d050      	beq.n	80022ee <HAL_TIM_ConfigClockSource+0x11a>
 800224c:	2b60      	cmp	r3, #96	; 0x60
 800224e:	d877      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x16c>
 8002250:	2b50      	cmp	r3, #80	; 0x50
 8002252:	d03c      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0xfa>
 8002254:	2b50      	cmp	r3, #80	; 0x50
 8002256:	d873      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x16c>
 8002258:	2b40      	cmp	r3, #64	; 0x40
 800225a:	d058      	beq.n	800230e <HAL_TIM_ConfigClockSource+0x13a>
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d86f      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x16c>
 8002260:	2b30      	cmp	r3, #48	; 0x30
 8002262:	d064      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x15a>
 8002264:	2b30      	cmp	r3, #48	; 0x30
 8002266:	d86b      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x16c>
 8002268:	2b20      	cmp	r3, #32
 800226a:	d060      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x15a>
 800226c:	2b20      	cmp	r3, #32
 800226e:	d867      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x16c>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05c      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x15a>
 8002274:	2b10      	cmp	r3, #16
 8002276:	d05a      	beq.n	800232e <HAL_TIM_ConfigClockSource+0x15a>
 8002278:	e062      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6899      	ldr	r1, [r3, #8]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f000 f968 	bl	800255e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800229c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	609a      	str	r2, [r3, #8]
      break;
 80022a6:	e04f      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f000 f951 	bl	800255e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ca:	609a      	str	r2, [r3, #8]
      break;
 80022cc:	e03c      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6859      	ldr	r1, [r3, #4]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	461a      	mov	r2, r3
 80022dc:	f000 f8c8 	bl	8002470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2150      	movs	r1, #80	; 0x50
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f91f 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 80022ec:	e02c      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f000 f8e6 	bl	80024cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2160      	movs	r1, #96	; 0x60
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f90f 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 800230c:	e01c      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6859      	ldr	r1, [r3, #4]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	461a      	mov	r2, r3
 800231c:	f000 f8a8 	bl	8002470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2140      	movs	r1, #64	; 0x40
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f8ff 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 800232c:	e00c      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	4610      	mov	r0, r2
 800233a:	f000 f8f6 	bl	800252a <TIM_ITRx_SetConfig>
      break;
 800233e:	e003      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e000      	b.n	8002348 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a29      	ldr	r2, [pc, #164]	; (8002464 <TIM_Base_SetConfig+0xb8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00b      	beq.n	80023dc <TIM_Base_SetConfig+0x30>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ca:	d007      	beq.n	80023dc <TIM_Base_SetConfig+0x30>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a26      	ldr	r2, [pc, #152]	; (8002468 <TIM_Base_SetConfig+0xbc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <TIM_Base_SetConfig+0x30>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a25      	ldr	r2, [pc, #148]	; (800246c <TIM_Base_SetConfig+0xc0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d108      	bne.n	80023ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <TIM_Base_SetConfig+0xb8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00b      	beq.n	800240e <TIM_Base_SetConfig+0x62>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fc:	d007      	beq.n	800240e <TIM_Base_SetConfig+0x62>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <TIM_Base_SetConfig+0xbc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d003      	beq.n	800240e <TIM_Base_SetConfig+0x62>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <TIM_Base_SetConfig+0xc0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d108      	bne.n	8002420 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <TIM_Base_SetConfig+0xb8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	615a      	str	r2, [r3, #20]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	40012c00 	.word	0x40012c00
 8002468:	40000400 	.word	0x40000400
 800246c:	40000800 	.word	0x40000800

08002470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f023 0201 	bic.w	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f023 030a 	bic.w	r3, r3, #10
 80024ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	621a      	str	r2, [r3, #32]
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f023 0210 	bic.w	r2, r3, #16
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	031b      	lsls	r3, r3, #12
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002508:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	621a      	str	r2, [r3, #32]
}
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	f043 0307 	orr.w	r3, r3, #7
 800254c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800255e:	b480      	push	{r7}
 8002560:	b087      	sub	sp, #28
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002578:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	021a      	lsls	r2, r3, #8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	431a      	orrs	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4313      	orrs	r3, r2
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	609a      	str	r2, [r3, #8]
}
 8002592:	bf00      	nop
 8002594:	371c      	adds	r7, #28
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e046      	b.n	8002642 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d009      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10c      	bne.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	4313      	orrs	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800

08002658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e042      	b.n	8002714 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe fb74 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fd71 	bl	80031a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b20      	cmp	r3, #32
 800273a:	d16d      	bne.n	8002818 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_UART_Transmit+0x2c>
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e066      	b.n	800281a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2221      	movs	r2, #33	; 0x21
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800275a:	f7fe fbf9 	bl	8000f50 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	88fa      	ldrh	r2, [r7, #6]
 8002764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	88fa      	ldrh	r2, [r7, #6]
 800276a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002774:	d108      	bne.n	8002788 <HAL_UART_Transmit+0x6c>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	e003      	b.n	8002790 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002790:	e02a      	b.n	80027e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2200      	movs	r2, #0
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 faf9 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e036      	b.n	800281a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10b      	bne.n	80027ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	3302      	adds	r3, #2
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	e007      	b.n	80027da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	3301      	adds	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1cf      	bne.n	8002792 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2200      	movs	r2, #0
 80027fa:	2140      	movs	r1, #64	; 0x40
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fac9 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e006      	b.n	800281a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002818:	2302      	movs	r3, #2
  }
}
 800281a:	4618      	mov	r0, r3
 800281c:	3720      	adds	r7, #32
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b0ba      	sub	sp, #232	; 0xe8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800286a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_UART_IRQHandler+0x66>
 8002876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fbd1 	bl	800302a <UART_Receive_IT>
      return;
 8002888:	e25b      	b.n	8002d42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800288a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80de 	beq.w	8002a50 <HAL_UART_IRQHandler+0x22c>
 8002894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d106      	bne.n	80028ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80d1 	beq.w	8002a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_UART_IRQHandler+0xae>
 80028ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f043 0201 	orr.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_UART_IRQHandler+0xd2>
 80028de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f043 0202 	orr.w	r2, r3, #2
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00b      	beq.n	800291a <HAL_UART_IRQHandler+0xf6>
 8002902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f043 0204 	orr.w	r2, r3, #4
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800291a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <HAL_UART_IRQHandler+0x126>
 8002926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f043 0208 	orr.w	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 81f2 	beq.w	8002d38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_UART_IRQHandler+0x14e>
 8002960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fb5c 	bl	800302a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_UART_IRQHandler+0x17a>
 8002996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d04f      	beq.n	8002a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fa66 	bl	8002e70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d041      	beq.n	8002a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3314      	adds	r3, #20
 80029b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3314      	adds	r3, #20
 80029da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1d9      	bne.n	80029b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d013      	beq.n	8002a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	4a7e      	ldr	r2, [pc, #504]	; (8002c04 <HAL_UART_IRQHandler+0x3e0>)
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fc12 	bl	800123c <HAL_DMA_Abort_IT>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	e00e      	b.n	8002a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f99c 	bl	8002d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a34:	e00a      	b.n	8002a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f998 	bl	8002d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	e006      	b.n	8002a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f994 	bl	8002d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002a4a:	e175      	b.n	8002d38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a4c:	bf00      	nop
    return;
 8002a4e:	e173      	b.n	8002d38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	f040 814f 	bne.w	8002cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8148 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8141 	beq.w	8002cf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80b6 	beq.w	8002c08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8145 	beq.w	8002d3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aba:	429a      	cmp	r2, r3
 8002abc:	f080 813e 	bcs.w	8002d3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	f000 8088 	beq.w	8002be4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ade:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	330c      	adds	r3, #12
 8002afc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b10:	e841 2300 	strex	r3, r2, [r1]
 8002b14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1d9      	bne.n	8002ad4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3314      	adds	r3, #20
 8002b26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3314      	adds	r3, #20
 8002b40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b50:	e841 2300 	strex	r3, r2, [r1]
 8002b54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e1      	bne.n	8002b20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3314      	adds	r3, #20
 8002b62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b66:	e853 3f00 	ldrex	r3, [r3]
 8002b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3314      	adds	r3, #20
 8002b7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b88:	e841 2300 	strex	r3, r2, [r1]
 8002b8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e3      	bne.n	8002b5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb4:	f023 0310 	bic.w	r3, r3, #16
 8002bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bc8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e3      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe faf1 	bl	80011c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8bf 	bl	8002d7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c00:	e09c      	b.n	8002d3c <HAL_UART_IRQHandler+0x518>
 8002c02:	bf00      	nop
 8002c04:	08002f35 	.word	0x08002f35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 808e 	beq.w	8002d40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8089 	beq.w	8002d40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c52:	647a      	str	r2, [r7, #68]	; 0x44
 8002c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e3      	bne.n	8002c2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	623b      	str	r3, [r7, #32]
   return(result);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3314      	adds	r3, #20
 8002c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c8a:	633a      	str	r2, [r7, #48]	; 0x30
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e3      	bne.n	8002c66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0310 	bic.w	r3, r3, #16
 8002cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cd0:	61fa      	str	r2, [r7, #28]
 8002cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e3      	bne.n	8002cac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f844 	bl	8002d7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cf6:	e023      	b.n	8002d40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <HAL_UART_IRQHandler+0x4f4>
 8002d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f923 	bl	8002f5c <UART_Transmit_IT>
    return;
 8002d16:	e014      	b.n	8002d42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00e      	beq.n	8002d42 <HAL_UART_IRQHandler+0x51e>
 8002d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f962 	bl	8002ffa <UART_EndTransmit_IT>
    return;
 8002d36:	e004      	b.n	8002d42 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d38:	bf00      	nop
 8002d3a:	e002      	b.n	8002d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d3c:	bf00      	nop
 8002d3e:	e000      	b.n	8002d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d40:	bf00      	nop
  }
}
 8002d42:	37e8      	adds	r7, #232	; 0xe8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	460b      	mov	r3, r1
 8002d88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b090      	sub	sp, #64	; 0x40
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da4:	e050      	b.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d04c      	beq.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002db4:	f7fe f8cc 	bl	8000f50 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d241      	bcs.n	8002e48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002de4:	637a      	str	r2, [r7, #52]	; 0x34
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3314      	adds	r3, #20
 8002dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	613b      	str	r3, [r7, #16]
   return(result);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3314      	adds	r3, #20
 8002e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e18:	623a      	str	r2, [r7, #32]
 8002e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	69f9      	ldr	r1, [r7, #28]
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e00f      	b.n	8002e68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d09f      	beq.n	8002da6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3740      	adds	r7, #64	; 0x40
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b095      	sub	sp, #84	; 0x54
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e82:	e853 3f00 	ldrex	r3, [r3]
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e98:	643a      	str	r2, [r7, #64]	; 0x40
 8002e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ea0:	e841 2300 	strex	r3, r2, [r1]
 8002ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e5      	bne.n	8002e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3314      	adds	r3, #20
 8002eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3314      	adds	r3, #20
 8002eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed4:	e841 2300 	strex	r3, r2, [r1]
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e5      	bne.n	8002eac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d119      	bne.n	8002f1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f023 0310 	bic.w	r3, r3, #16
 8002efe:	647b      	str	r3, [r7, #68]	; 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f08:	61ba      	str	r2, [r7, #24]
 8002f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	6979      	ldr	r1, [r7, #20]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	613b      	str	r3, [r7, #16]
   return(result);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e5      	bne.n	8002ee8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f2a:	bf00      	nop
 8002f2c:	3754      	adds	r7, #84	; 0x54
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7ff ff0c 	bl	8002d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b21      	cmp	r3, #33	; 0x21
 8002f6e:	d13e      	bne.n	8002fee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d114      	bne.n	8002fa4 <UART_Transmit_IT+0x48>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d110      	bne.n	8002fa4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	1c9a      	adds	r2, r3, #2
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	621a      	str	r2, [r3, #32]
 8002fa2:	e008      	b.n	8002fb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	1c59      	adds	r1, r3, #1
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6211      	str	r1, [r2, #32]
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10f      	bne.n	8002fea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e000      	b.n	8002ff0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fee:	2302      	movs	r3, #2
  }
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff fe94 	bl	8002d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b08c      	sub	sp, #48	; 0x30
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b22      	cmp	r3, #34	; 0x22
 800303c:	f040 80ae 	bne.w	800319c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003048:	d117      	bne.n	800307a <UART_Receive_IT+0x50>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d113      	bne.n	800307a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003068:	b29a      	uxth	r2, r3
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	1c9a      	adds	r2, r3, #2
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
 8003078:	e026      	b.n	80030c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308c:	d007      	beq.n	800309e <UART_Receive_IT+0x74>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <UART_Receive_IT+0x82>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e008      	b.n	80030be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4619      	mov	r1, r3
 80030d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d15d      	bne.n	8003198 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0220 	bic.w	r2, r2, #32
 80030ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	2b01      	cmp	r3, #1
 8003120:	d135      	bne.n	800318e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	613b      	str	r3, [r7, #16]
   return(result);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f023 0310 	bic.w	r3, r3, #16
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	623a      	str	r2, [r7, #32]
 800314a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	69f9      	ldr	r1, [r7, #28]
 800314e:	6a3a      	ldr	r2, [r7, #32]
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	61bb      	str	r3, [r7, #24]
   return(result);
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e5      	bne.n	8003128 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b10      	cmp	r3, #16
 8003168:	d10a      	bne.n	8003180 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fdf9 	bl	8002d7e <HAL_UARTEx_RxEventCallback>
 800318c:	e002      	b.n	8003194 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff fde3 	bl	8002d5a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e002      	b.n	800319e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3730      	adds	r7, #48	; 0x30
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031e2:	f023 030c 	bic.w	r3, r3, #12
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <UART_SetConfig+0x114>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7fe fe04 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	e002      	b.n	800321e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7fe fdec 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 800321c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	009a      	lsls	r2, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <UART_SetConfig+0x118>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	0119      	lsls	r1, r3, #4
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009a      	lsls	r2, r3, #2
 8003248:	441a      	add	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	fbb2 f2f3 	udiv	r2, r2, r3
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <UART_SetConfig+0x118>)
 8003256:	fba3 0302 	umull	r0, r3, r3, r2
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	2064      	movs	r0, #100	; 0x64
 800325e:	fb00 f303 	mul.w	r3, r0, r3
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	3332      	adds	r3, #50	; 0x32
 8003268:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <UART_SetConfig+0x118>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003274:	4419      	add	r1, r3
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009a      	lsls	r2, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	fbb2 f2f3 	udiv	r2, r2, r3
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <UART_SetConfig+0x118>)
 800328e:	fba3 0302 	umull	r0, r3, r3, r2
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2064      	movs	r0, #100	; 0x64
 8003296:	fb00 f303 	mul.w	r3, r0, r3
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	3332      	adds	r3, #50	; 0x32
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <UART_SetConfig+0x118>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	440a      	add	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40013800 	.word	0x40013800
 80032c0:	51eb851f 	.word	0x51eb851f

080032c4 <__errno>:
 80032c4:	4b01      	ldr	r3, [pc, #4]	; (80032cc <__errno+0x8>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	2000000c 	.word	0x2000000c

080032d0 <__libc_init_array>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	2600      	movs	r6, #0
 80032d4:	4d0c      	ldr	r5, [pc, #48]	; (8003308 <__libc_init_array+0x38>)
 80032d6:	4c0d      	ldr	r4, [pc, #52]	; (800330c <__libc_init_array+0x3c>)
 80032d8:	1b64      	subs	r4, r4, r5
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d109      	bne.n	80032f4 <__libc_init_array+0x24>
 80032e0:	f000 fc5c 	bl	8003b9c <_init>
 80032e4:	2600      	movs	r6, #0
 80032e6:	4d0a      	ldr	r5, [pc, #40]	; (8003310 <__libc_init_array+0x40>)
 80032e8:	4c0a      	ldr	r4, [pc, #40]	; (8003314 <__libc_init_array+0x44>)
 80032ea:	1b64      	subs	r4, r4, r5
 80032ec:	10a4      	asrs	r4, r4, #2
 80032ee:	42a6      	cmp	r6, r4
 80032f0:	d105      	bne.n	80032fe <__libc_init_array+0x2e>
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f8:	4798      	blx	r3
 80032fa:	3601      	adds	r6, #1
 80032fc:	e7ee      	b.n	80032dc <__libc_init_array+0xc>
 80032fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003302:	4798      	blx	r3
 8003304:	3601      	adds	r6, #1
 8003306:	e7f2      	b.n	80032ee <__libc_init_array+0x1e>
 8003308:	08003c88 	.word	0x08003c88
 800330c:	08003c88 	.word	0x08003c88
 8003310:	08003c88 	.word	0x08003c88
 8003314:	08003c8c 	.word	0x08003c8c

08003318 <memset>:
 8003318:	4603      	mov	r3, r0
 800331a:	4402      	add	r2, r0
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	f803 1b01 	strb.w	r1, [r3], #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <siprintf>:
 8003328:	b40e      	push	{r1, r2, r3}
 800332a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800332e:	b500      	push	{lr}
 8003330:	b09c      	sub	sp, #112	; 0x70
 8003332:	ab1d      	add	r3, sp, #116	; 0x74
 8003334:	9002      	str	r0, [sp, #8]
 8003336:	9006      	str	r0, [sp, #24]
 8003338:	9107      	str	r1, [sp, #28]
 800333a:	9104      	str	r1, [sp, #16]
 800333c:	4808      	ldr	r0, [pc, #32]	; (8003360 <siprintf+0x38>)
 800333e:	4909      	ldr	r1, [pc, #36]	; (8003364 <siprintf+0x3c>)
 8003340:	f853 2b04 	ldr.w	r2, [r3], #4
 8003344:	9105      	str	r1, [sp, #20]
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	a902      	add	r1, sp, #8
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	f000 f868 	bl	8003420 <_svfiprintf_r>
 8003350:	2200      	movs	r2, #0
 8003352:	9b02      	ldr	r3, [sp, #8]
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	b01c      	add	sp, #112	; 0x70
 8003358:	f85d eb04 	ldr.w	lr, [sp], #4
 800335c:	b003      	add	sp, #12
 800335e:	4770      	bx	lr
 8003360:	2000000c 	.word	0x2000000c
 8003364:	ffff0208 	.word	0xffff0208

08003368 <__ssputs_r>:
 8003368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	688e      	ldr	r6, [r1, #8]
 800336e:	4682      	mov	sl, r0
 8003370:	429e      	cmp	r6, r3
 8003372:	460c      	mov	r4, r1
 8003374:	4690      	mov	r8, r2
 8003376:	461f      	mov	r7, r3
 8003378:	d838      	bhi.n	80033ec <__ssputs_r+0x84>
 800337a:	898a      	ldrh	r2, [r1, #12]
 800337c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003380:	d032      	beq.n	80033e8 <__ssputs_r+0x80>
 8003382:	6825      	ldr	r5, [r4, #0]
 8003384:	6909      	ldr	r1, [r1, #16]
 8003386:	3301      	adds	r3, #1
 8003388:	eba5 0901 	sub.w	r9, r5, r1
 800338c:	6965      	ldr	r5, [r4, #20]
 800338e:	444b      	add	r3, r9
 8003390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003398:	106d      	asrs	r5, r5, #1
 800339a:	429d      	cmp	r5, r3
 800339c:	bf38      	it	cc
 800339e:	461d      	movcc	r5, r3
 80033a0:	0553      	lsls	r3, r2, #21
 80033a2:	d531      	bpl.n	8003408 <__ssputs_r+0xa0>
 80033a4:	4629      	mov	r1, r5
 80033a6:	f000 fb53 	bl	8003a50 <_malloc_r>
 80033aa:	4606      	mov	r6, r0
 80033ac:	b950      	cbnz	r0, 80033c4 <__ssputs_r+0x5c>
 80033ae:	230c      	movs	r3, #12
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	f8ca 3000 	str.w	r3, [sl]
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c4:	464a      	mov	r2, r9
 80033c6:	6921      	ldr	r1, [r4, #16]
 80033c8:	f000 face 	bl	8003968 <memcpy>
 80033cc:	89a3      	ldrh	r3, [r4, #12]
 80033ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d6:	81a3      	strh	r3, [r4, #12]
 80033d8:	6126      	str	r6, [r4, #16]
 80033da:	444e      	add	r6, r9
 80033dc:	6026      	str	r6, [r4, #0]
 80033de:	463e      	mov	r6, r7
 80033e0:	6165      	str	r5, [r4, #20]
 80033e2:	eba5 0509 	sub.w	r5, r5, r9
 80033e6:	60a5      	str	r5, [r4, #8]
 80033e8:	42be      	cmp	r6, r7
 80033ea:	d900      	bls.n	80033ee <__ssputs_r+0x86>
 80033ec:	463e      	mov	r6, r7
 80033ee:	4632      	mov	r2, r6
 80033f0:	4641      	mov	r1, r8
 80033f2:	6820      	ldr	r0, [r4, #0]
 80033f4:	f000 fac6 	bl	8003984 <memmove>
 80033f8:	68a3      	ldr	r3, [r4, #8]
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	1b9b      	subs	r3, r3, r6
 80033fe:	4432      	add	r2, r6
 8003400:	2000      	movs	r0, #0
 8003402:	60a3      	str	r3, [r4, #8]
 8003404:	6022      	str	r2, [r4, #0]
 8003406:	e7db      	b.n	80033c0 <__ssputs_r+0x58>
 8003408:	462a      	mov	r2, r5
 800340a:	f000 fb7b 	bl	8003b04 <_realloc_r>
 800340e:	4606      	mov	r6, r0
 8003410:	2800      	cmp	r0, #0
 8003412:	d1e1      	bne.n	80033d8 <__ssputs_r+0x70>
 8003414:	4650      	mov	r0, sl
 8003416:	6921      	ldr	r1, [r4, #16]
 8003418:	f000 face 	bl	80039b8 <_free_r>
 800341c:	e7c7      	b.n	80033ae <__ssputs_r+0x46>
	...

08003420 <_svfiprintf_r>:
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	4698      	mov	r8, r3
 8003426:	898b      	ldrh	r3, [r1, #12]
 8003428:	4607      	mov	r7, r0
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	460d      	mov	r5, r1
 800342e:	4614      	mov	r4, r2
 8003430:	b09d      	sub	sp, #116	; 0x74
 8003432:	d50e      	bpl.n	8003452 <_svfiprintf_r+0x32>
 8003434:	690b      	ldr	r3, [r1, #16]
 8003436:	b963      	cbnz	r3, 8003452 <_svfiprintf_r+0x32>
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	f000 fb09 	bl	8003a50 <_malloc_r>
 800343e:	6028      	str	r0, [r5, #0]
 8003440:	6128      	str	r0, [r5, #16]
 8003442:	b920      	cbnz	r0, 800344e <_svfiprintf_r+0x2e>
 8003444:	230c      	movs	r3, #12
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	e0d1      	b.n	80035f2 <_svfiprintf_r+0x1d2>
 800344e:	2340      	movs	r3, #64	; 0x40
 8003450:	616b      	str	r3, [r5, #20]
 8003452:	2300      	movs	r3, #0
 8003454:	9309      	str	r3, [sp, #36]	; 0x24
 8003456:	2320      	movs	r3, #32
 8003458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800345c:	2330      	movs	r3, #48	; 0x30
 800345e:	f04f 0901 	mov.w	r9, #1
 8003462:	f8cd 800c 	str.w	r8, [sp, #12]
 8003466:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800360c <_svfiprintf_r+0x1ec>
 800346a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800346e:	4623      	mov	r3, r4
 8003470:	469a      	mov	sl, r3
 8003472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003476:	b10a      	cbz	r2, 800347c <_svfiprintf_r+0x5c>
 8003478:	2a25      	cmp	r2, #37	; 0x25
 800347a:	d1f9      	bne.n	8003470 <_svfiprintf_r+0x50>
 800347c:	ebba 0b04 	subs.w	fp, sl, r4
 8003480:	d00b      	beq.n	800349a <_svfiprintf_r+0x7a>
 8003482:	465b      	mov	r3, fp
 8003484:	4622      	mov	r2, r4
 8003486:	4629      	mov	r1, r5
 8003488:	4638      	mov	r0, r7
 800348a:	f7ff ff6d 	bl	8003368 <__ssputs_r>
 800348e:	3001      	adds	r0, #1
 8003490:	f000 80aa 	beq.w	80035e8 <_svfiprintf_r+0x1c8>
 8003494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003496:	445a      	add	r2, fp
 8003498:	9209      	str	r2, [sp, #36]	; 0x24
 800349a:	f89a 3000 	ldrb.w	r3, [sl]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a2 	beq.w	80035e8 <_svfiprintf_r+0x1c8>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f04f 32ff 	mov.w	r2, #4294967295
 80034aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034ae:	f10a 0a01 	add.w	sl, sl, #1
 80034b2:	9304      	str	r3, [sp, #16]
 80034b4:	9307      	str	r3, [sp, #28]
 80034b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ba:	931a      	str	r3, [sp, #104]	; 0x68
 80034bc:	4654      	mov	r4, sl
 80034be:	2205      	movs	r2, #5
 80034c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c4:	4851      	ldr	r0, [pc, #324]	; (800360c <_svfiprintf_r+0x1ec>)
 80034c6:	f000 fa41 	bl	800394c <memchr>
 80034ca:	9a04      	ldr	r2, [sp, #16]
 80034cc:	b9d8      	cbnz	r0, 8003506 <_svfiprintf_r+0xe6>
 80034ce:	06d0      	lsls	r0, r2, #27
 80034d0:	bf44      	itt	mi
 80034d2:	2320      	movmi	r3, #32
 80034d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034d8:	0711      	lsls	r1, r2, #28
 80034da:	bf44      	itt	mi
 80034dc:	232b      	movmi	r3, #43	; 0x2b
 80034de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e2:	f89a 3000 	ldrb.w	r3, [sl]
 80034e6:	2b2a      	cmp	r3, #42	; 0x2a
 80034e8:	d015      	beq.n	8003516 <_svfiprintf_r+0xf6>
 80034ea:	4654      	mov	r4, sl
 80034ec:	2000      	movs	r0, #0
 80034ee:	f04f 0c0a 	mov.w	ip, #10
 80034f2:	9a07      	ldr	r2, [sp, #28]
 80034f4:	4621      	mov	r1, r4
 80034f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034fa:	3b30      	subs	r3, #48	; 0x30
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	d94e      	bls.n	800359e <_svfiprintf_r+0x17e>
 8003500:	b1b0      	cbz	r0, 8003530 <_svfiprintf_r+0x110>
 8003502:	9207      	str	r2, [sp, #28]
 8003504:	e014      	b.n	8003530 <_svfiprintf_r+0x110>
 8003506:	eba0 0308 	sub.w	r3, r0, r8
 800350a:	fa09 f303 	lsl.w	r3, r9, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	46a2      	mov	sl, r4
 8003512:	9304      	str	r3, [sp, #16]
 8003514:	e7d2      	b.n	80034bc <_svfiprintf_r+0x9c>
 8003516:	9b03      	ldr	r3, [sp, #12]
 8003518:	1d19      	adds	r1, r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	9103      	str	r1, [sp, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	bfbb      	ittet	lt
 8003522:	425b      	neglt	r3, r3
 8003524:	f042 0202 	orrlt.w	r2, r2, #2
 8003528:	9307      	strge	r3, [sp, #28]
 800352a:	9307      	strlt	r3, [sp, #28]
 800352c:	bfb8      	it	lt
 800352e:	9204      	strlt	r2, [sp, #16]
 8003530:	7823      	ldrb	r3, [r4, #0]
 8003532:	2b2e      	cmp	r3, #46	; 0x2e
 8003534:	d10c      	bne.n	8003550 <_svfiprintf_r+0x130>
 8003536:	7863      	ldrb	r3, [r4, #1]
 8003538:	2b2a      	cmp	r3, #42	; 0x2a
 800353a:	d135      	bne.n	80035a8 <_svfiprintf_r+0x188>
 800353c:	9b03      	ldr	r3, [sp, #12]
 800353e:	3402      	adds	r4, #2
 8003540:	1d1a      	adds	r2, r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	9203      	str	r2, [sp, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	bfb8      	it	lt
 800354a:	f04f 33ff 	movlt.w	r3, #4294967295
 800354e:	9305      	str	r3, [sp, #20]
 8003550:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800361c <_svfiprintf_r+0x1fc>
 8003554:	2203      	movs	r2, #3
 8003556:	4650      	mov	r0, sl
 8003558:	7821      	ldrb	r1, [r4, #0]
 800355a:	f000 f9f7 	bl	800394c <memchr>
 800355e:	b140      	cbz	r0, 8003572 <_svfiprintf_r+0x152>
 8003560:	2340      	movs	r3, #64	; 0x40
 8003562:	eba0 000a 	sub.w	r0, r0, sl
 8003566:	fa03 f000 	lsl.w	r0, r3, r0
 800356a:	9b04      	ldr	r3, [sp, #16]
 800356c:	3401      	adds	r4, #1
 800356e:	4303      	orrs	r3, r0
 8003570:	9304      	str	r3, [sp, #16]
 8003572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003576:	2206      	movs	r2, #6
 8003578:	4825      	ldr	r0, [pc, #148]	; (8003610 <_svfiprintf_r+0x1f0>)
 800357a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800357e:	f000 f9e5 	bl	800394c <memchr>
 8003582:	2800      	cmp	r0, #0
 8003584:	d038      	beq.n	80035f8 <_svfiprintf_r+0x1d8>
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <_svfiprintf_r+0x1f4>)
 8003588:	bb1b      	cbnz	r3, 80035d2 <_svfiprintf_r+0x1b2>
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	3307      	adds	r3, #7
 800358e:	f023 0307 	bic.w	r3, r3, #7
 8003592:	3308      	adds	r3, #8
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003598:	4433      	add	r3, r6
 800359a:	9309      	str	r3, [sp, #36]	; 0x24
 800359c:	e767      	b.n	800346e <_svfiprintf_r+0x4e>
 800359e:	460c      	mov	r4, r1
 80035a0:	2001      	movs	r0, #1
 80035a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80035a6:	e7a5      	b.n	80034f4 <_svfiprintf_r+0xd4>
 80035a8:	2300      	movs	r3, #0
 80035aa:	f04f 0c0a 	mov.w	ip, #10
 80035ae:	4619      	mov	r1, r3
 80035b0:	3401      	adds	r4, #1
 80035b2:	9305      	str	r3, [sp, #20]
 80035b4:	4620      	mov	r0, r4
 80035b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ba:	3a30      	subs	r2, #48	; 0x30
 80035bc:	2a09      	cmp	r2, #9
 80035be:	d903      	bls.n	80035c8 <_svfiprintf_r+0x1a8>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0c5      	beq.n	8003550 <_svfiprintf_r+0x130>
 80035c4:	9105      	str	r1, [sp, #20]
 80035c6:	e7c3      	b.n	8003550 <_svfiprintf_r+0x130>
 80035c8:	4604      	mov	r4, r0
 80035ca:	2301      	movs	r3, #1
 80035cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80035d0:	e7f0      	b.n	80035b4 <_svfiprintf_r+0x194>
 80035d2:	ab03      	add	r3, sp, #12
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	462a      	mov	r2, r5
 80035d8:	4638      	mov	r0, r7
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <_svfiprintf_r+0x1f8>)
 80035dc:	a904      	add	r1, sp, #16
 80035de:	f3af 8000 	nop.w
 80035e2:	1c42      	adds	r2, r0, #1
 80035e4:	4606      	mov	r6, r0
 80035e6:	d1d6      	bne.n	8003596 <_svfiprintf_r+0x176>
 80035e8:	89ab      	ldrh	r3, [r5, #12]
 80035ea:	065b      	lsls	r3, r3, #25
 80035ec:	f53f af2c 	bmi.w	8003448 <_svfiprintf_r+0x28>
 80035f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035f2:	b01d      	add	sp, #116	; 0x74
 80035f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f8:	ab03      	add	r3, sp, #12
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	462a      	mov	r2, r5
 80035fe:	4638      	mov	r0, r7
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <_svfiprintf_r+0x1f8>)
 8003602:	a904      	add	r1, sp, #16
 8003604:	f000 f87c 	bl	8003700 <_printf_i>
 8003608:	e7eb      	b.n	80035e2 <_svfiprintf_r+0x1c2>
 800360a:	bf00      	nop
 800360c:	08003c52 	.word	0x08003c52
 8003610:	08003c5c 	.word	0x08003c5c
 8003614:	00000000 	.word	0x00000000
 8003618:	08003369 	.word	0x08003369
 800361c:	08003c58 	.word	0x08003c58

08003620 <_printf_common>:
 8003620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003624:	4616      	mov	r6, r2
 8003626:	4699      	mov	r9, r3
 8003628:	688a      	ldr	r2, [r1, #8]
 800362a:	690b      	ldr	r3, [r1, #16]
 800362c:	4607      	mov	r7, r0
 800362e:	4293      	cmp	r3, r2
 8003630:	bfb8      	it	lt
 8003632:	4613      	movlt	r3, r2
 8003634:	6033      	str	r3, [r6, #0]
 8003636:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800363a:	460c      	mov	r4, r1
 800363c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003640:	b10a      	cbz	r2, 8003646 <_printf_common+0x26>
 8003642:	3301      	adds	r3, #1
 8003644:	6033      	str	r3, [r6, #0]
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	0699      	lsls	r1, r3, #26
 800364a:	bf42      	ittt	mi
 800364c:	6833      	ldrmi	r3, [r6, #0]
 800364e:	3302      	addmi	r3, #2
 8003650:	6033      	strmi	r3, [r6, #0]
 8003652:	6825      	ldr	r5, [r4, #0]
 8003654:	f015 0506 	ands.w	r5, r5, #6
 8003658:	d106      	bne.n	8003668 <_printf_common+0x48>
 800365a:	f104 0a19 	add.w	sl, r4, #25
 800365e:	68e3      	ldr	r3, [r4, #12]
 8003660:	6832      	ldr	r2, [r6, #0]
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	42ab      	cmp	r3, r5
 8003666:	dc28      	bgt.n	80036ba <_printf_common+0x9a>
 8003668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800366c:	1e13      	subs	r3, r2, #0
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	bf18      	it	ne
 8003672:	2301      	movne	r3, #1
 8003674:	0692      	lsls	r2, r2, #26
 8003676:	d42d      	bmi.n	80036d4 <_printf_common+0xb4>
 8003678:	4649      	mov	r1, r9
 800367a:	4638      	mov	r0, r7
 800367c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003680:	47c0      	blx	r8
 8003682:	3001      	adds	r0, #1
 8003684:	d020      	beq.n	80036c8 <_printf_common+0xa8>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	68e5      	ldr	r5, [r4, #12]
 800368a:	f003 0306 	and.w	r3, r3, #6
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf18      	it	ne
 8003692:	2500      	movne	r5, #0
 8003694:	6832      	ldr	r2, [r6, #0]
 8003696:	f04f 0600 	mov.w	r6, #0
 800369a:	68a3      	ldr	r3, [r4, #8]
 800369c:	bf08      	it	eq
 800369e:	1aad      	subeq	r5, r5, r2
 80036a0:	6922      	ldr	r2, [r4, #16]
 80036a2:	bf08      	it	eq
 80036a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bfc4      	itt	gt
 80036ac:	1a9b      	subgt	r3, r3, r2
 80036ae:	18ed      	addgt	r5, r5, r3
 80036b0:	341a      	adds	r4, #26
 80036b2:	42b5      	cmp	r5, r6
 80036b4:	d11a      	bne.n	80036ec <_printf_common+0xcc>
 80036b6:	2000      	movs	r0, #0
 80036b8:	e008      	b.n	80036cc <_printf_common+0xac>
 80036ba:	2301      	movs	r3, #1
 80036bc:	4652      	mov	r2, sl
 80036be:	4649      	mov	r1, r9
 80036c0:	4638      	mov	r0, r7
 80036c2:	47c0      	blx	r8
 80036c4:	3001      	adds	r0, #1
 80036c6:	d103      	bne.n	80036d0 <_printf_common+0xb0>
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d0:	3501      	adds	r5, #1
 80036d2:	e7c4      	b.n	800365e <_printf_common+0x3e>
 80036d4:	2030      	movs	r0, #48	; 0x30
 80036d6:	18e1      	adds	r1, r4, r3
 80036d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036e2:	4422      	add	r2, r4
 80036e4:	3302      	adds	r3, #2
 80036e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036ea:	e7c5      	b.n	8003678 <_printf_common+0x58>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4622      	mov	r2, r4
 80036f0:	4649      	mov	r1, r9
 80036f2:	4638      	mov	r0, r7
 80036f4:	47c0      	blx	r8
 80036f6:	3001      	adds	r0, #1
 80036f8:	d0e6      	beq.n	80036c8 <_printf_common+0xa8>
 80036fa:	3601      	adds	r6, #1
 80036fc:	e7d9      	b.n	80036b2 <_printf_common+0x92>
	...

08003700 <_printf_i>:
 8003700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003704:	460c      	mov	r4, r1
 8003706:	7e27      	ldrb	r7, [r4, #24]
 8003708:	4691      	mov	r9, r2
 800370a:	2f78      	cmp	r7, #120	; 0x78
 800370c:	4680      	mov	r8, r0
 800370e:	469a      	mov	sl, r3
 8003710:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003716:	d807      	bhi.n	8003728 <_printf_i+0x28>
 8003718:	2f62      	cmp	r7, #98	; 0x62
 800371a:	d80a      	bhi.n	8003732 <_printf_i+0x32>
 800371c:	2f00      	cmp	r7, #0
 800371e:	f000 80d9 	beq.w	80038d4 <_printf_i+0x1d4>
 8003722:	2f58      	cmp	r7, #88	; 0x58
 8003724:	f000 80a4 	beq.w	8003870 <_printf_i+0x170>
 8003728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800372c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003730:	e03a      	b.n	80037a8 <_printf_i+0xa8>
 8003732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003736:	2b15      	cmp	r3, #21
 8003738:	d8f6      	bhi.n	8003728 <_printf_i+0x28>
 800373a:	a001      	add	r0, pc, #4	; (adr r0, 8003740 <_printf_i+0x40>)
 800373c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003740:	08003799 	.word	0x08003799
 8003744:	080037ad 	.word	0x080037ad
 8003748:	08003729 	.word	0x08003729
 800374c:	08003729 	.word	0x08003729
 8003750:	08003729 	.word	0x08003729
 8003754:	08003729 	.word	0x08003729
 8003758:	080037ad 	.word	0x080037ad
 800375c:	08003729 	.word	0x08003729
 8003760:	08003729 	.word	0x08003729
 8003764:	08003729 	.word	0x08003729
 8003768:	08003729 	.word	0x08003729
 800376c:	080038bb 	.word	0x080038bb
 8003770:	080037dd 	.word	0x080037dd
 8003774:	0800389d 	.word	0x0800389d
 8003778:	08003729 	.word	0x08003729
 800377c:	08003729 	.word	0x08003729
 8003780:	080038dd 	.word	0x080038dd
 8003784:	08003729 	.word	0x08003729
 8003788:	080037dd 	.word	0x080037dd
 800378c:	08003729 	.word	0x08003729
 8003790:	08003729 	.word	0x08003729
 8003794:	080038a5 	.word	0x080038a5
 8003798:	680b      	ldr	r3, [r1, #0]
 800379a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	600a      	str	r2, [r1, #0]
 80037a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0a4      	b.n	80038f6 <_printf_i+0x1f6>
 80037ac:	6825      	ldr	r5, [r4, #0]
 80037ae:	6808      	ldr	r0, [r1, #0]
 80037b0:	062e      	lsls	r6, r5, #24
 80037b2:	f100 0304 	add.w	r3, r0, #4
 80037b6:	d50a      	bpl.n	80037ce <_printf_i+0xce>
 80037b8:	6805      	ldr	r5, [r0, #0]
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	2d00      	cmp	r5, #0
 80037be:	da03      	bge.n	80037c8 <_printf_i+0xc8>
 80037c0:	232d      	movs	r3, #45	; 0x2d
 80037c2:	426d      	negs	r5, r5
 80037c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037c8:	230a      	movs	r3, #10
 80037ca:	485e      	ldr	r0, [pc, #376]	; (8003944 <_printf_i+0x244>)
 80037cc:	e019      	b.n	8003802 <_printf_i+0x102>
 80037ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80037d2:	6805      	ldr	r5, [r0, #0]
 80037d4:	600b      	str	r3, [r1, #0]
 80037d6:	bf18      	it	ne
 80037d8:	b22d      	sxthne	r5, r5
 80037da:	e7ef      	b.n	80037bc <_printf_i+0xbc>
 80037dc:	680b      	ldr	r3, [r1, #0]
 80037de:	6825      	ldr	r5, [r4, #0]
 80037e0:	1d18      	adds	r0, r3, #4
 80037e2:	6008      	str	r0, [r1, #0]
 80037e4:	0628      	lsls	r0, r5, #24
 80037e6:	d501      	bpl.n	80037ec <_printf_i+0xec>
 80037e8:	681d      	ldr	r5, [r3, #0]
 80037ea:	e002      	b.n	80037f2 <_printf_i+0xf2>
 80037ec:	0669      	lsls	r1, r5, #25
 80037ee:	d5fb      	bpl.n	80037e8 <_printf_i+0xe8>
 80037f0:	881d      	ldrh	r5, [r3, #0]
 80037f2:	2f6f      	cmp	r7, #111	; 0x6f
 80037f4:	bf0c      	ite	eq
 80037f6:	2308      	moveq	r3, #8
 80037f8:	230a      	movne	r3, #10
 80037fa:	4852      	ldr	r0, [pc, #328]	; (8003944 <_printf_i+0x244>)
 80037fc:	2100      	movs	r1, #0
 80037fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003802:	6866      	ldr	r6, [r4, #4]
 8003804:	2e00      	cmp	r6, #0
 8003806:	bfa8      	it	ge
 8003808:	6821      	ldrge	r1, [r4, #0]
 800380a:	60a6      	str	r6, [r4, #8]
 800380c:	bfa4      	itt	ge
 800380e:	f021 0104 	bicge.w	r1, r1, #4
 8003812:	6021      	strge	r1, [r4, #0]
 8003814:	b90d      	cbnz	r5, 800381a <_printf_i+0x11a>
 8003816:	2e00      	cmp	r6, #0
 8003818:	d04d      	beq.n	80038b6 <_printf_i+0x1b6>
 800381a:	4616      	mov	r6, r2
 800381c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003820:	fb03 5711 	mls	r7, r3, r1, r5
 8003824:	5dc7      	ldrb	r7, [r0, r7]
 8003826:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800382a:	462f      	mov	r7, r5
 800382c:	42bb      	cmp	r3, r7
 800382e:	460d      	mov	r5, r1
 8003830:	d9f4      	bls.n	800381c <_printf_i+0x11c>
 8003832:	2b08      	cmp	r3, #8
 8003834:	d10b      	bne.n	800384e <_printf_i+0x14e>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	07df      	lsls	r7, r3, #31
 800383a:	d508      	bpl.n	800384e <_printf_i+0x14e>
 800383c:	6923      	ldr	r3, [r4, #16]
 800383e:	6861      	ldr	r1, [r4, #4]
 8003840:	4299      	cmp	r1, r3
 8003842:	bfde      	ittt	le
 8003844:	2330      	movle	r3, #48	; 0x30
 8003846:	f806 3c01 	strble.w	r3, [r6, #-1]
 800384a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800384e:	1b92      	subs	r2, r2, r6
 8003850:	6122      	str	r2, [r4, #16]
 8003852:	464b      	mov	r3, r9
 8003854:	4621      	mov	r1, r4
 8003856:	4640      	mov	r0, r8
 8003858:	f8cd a000 	str.w	sl, [sp]
 800385c:	aa03      	add	r2, sp, #12
 800385e:	f7ff fedf 	bl	8003620 <_printf_common>
 8003862:	3001      	adds	r0, #1
 8003864:	d14c      	bne.n	8003900 <_printf_i+0x200>
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	b004      	add	sp, #16
 800386c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003870:	4834      	ldr	r0, [pc, #208]	; (8003944 <_printf_i+0x244>)
 8003872:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003876:	680e      	ldr	r6, [r1, #0]
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	f856 5b04 	ldr.w	r5, [r6], #4
 800387e:	061f      	lsls	r7, r3, #24
 8003880:	600e      	str	r6, [r1, #0]
 8003882:	d514      	bpl.n	80038ae <_printf_i+0x1ae>
 8003884:	07d9      	lsls	r1, r3, #31
 8003886:	bf44      	itt	mi
 8003888:	f043 0320 	orrmi.w	r3, r3, #32
 800388c:	6023      	strmi	r3, [r4, #0]
 800388e:	b91d      	cbnz	r5, 8003898 <_printf_i+0x198>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	f023 0320 	bic.w	r3, r3, #32
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	2310      	movs	r3, #16
 800389a:	e7af      	b.n	80037fc <_printf_i+0xfc>
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	f043 0320 	orr.w	r3, r3, #32
 80038a2:	6023      	str	r3, [r4, #0]
 80038a4:	2378      	movs	r3, #120	; 0x78
 80038a6:	4828      	ldr	r0, [pc, #160]	; (8003948 <_printf_i+0x248>)
 80038a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038ac:	e7e3      	b.n	8003876 <_printf_i+0x176>
 80038ae:	065e      	lsls	r6, r3, #25
 80038b0:	bf48      	it	mi
 80038b2:	b2ad      	uxthmi	r5, r5
 80038b4:	e7e6      	b.n	8003884 <_printf_i+0x184>
 80038b6:	4616      	mov	r6, r2
 80038b8:	e7bb      	b.n	8003832 <_printf_i+0x132>
 80038ba:	680b      	ldr	r3, [r1, #0]
 80038bc:	6826      	ldr	r6, [r4, #0]
 80038be:	1d1d      	adds	r5, r3, #4
 80038c0:	6960      	ldr	r0, [r4, #20]
 80038c2:	600d      	str	r5, [r1, #0]
 80038c4:	0635      	lsls	r5, r6, #24
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	d501      	bpl.n	80038ce <_printf_i+0x1ce>
 80038ca:	6018      	str	r0, [r3, #0]
 80038cc:	e002      	b.n	80038d4 <_printf_i+0x1d4>
 80038ce:	0671      	lsls	r1, r6, #25
 80038d0:	d5fb      	bpl.n	80038ca <_printf_i+0x1ca>
 80038d2:	8018      	strh	r0, [r3, #0]
 80038d4:	2300      	movs	r3, #0
 80038d6:	4616      	mov	r6, r2
 80038d8:	6123      	str	r3, [r4, #16]
 80038da:	e7ba      	b.n	8003852 <_printf_i+0x152>
 80038dc:	680b      	ldr	r3, [r1, #0]
 80038de:	1d1a      	adds	r2, r3, #4
 80038e0:	600a      	str	r2, [r1, #0]
 80038e2:	681e      	ldr	r6, [r3, #0]
 80038e4:	2100      	movs	r1, #0
 80038e6:	4630      	mov	r0, r6
 80038e8:	6862      	ldr	r2, [r4, #4]
 80038ea:	f000 f82f 	bl	800394c <memchr>
 80038ee:	b108      	cbz	r0, 80038f4 <_printf_i+0x1f4>
 80038f0:	1b80      	subs	r0, r0, r6
 80038f2:	6060      	str	r0, [r4, #4]
 80038f4:	6863      	ldr	r3, [r4, #4]
 80038f6:	6123      	str	r3, [r4, #16]
 80038f8:	2300      	movs	r3, #0
 80038fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038fe:	e7a8      	b.n	8003852 <_printf_i+0x152>
 8003900:	4632      	mov	r2, r6
 8003902:	4649      	mov	r1, r9
 8003904:	4640      	mov	r0, r8
 8003906:	6923      	ldr	r3, [r4, #16]
 8003908:	47d0      	blx	sl
 800390a:	3001      	adds	r0, #1
 800390c:	d0ab      	beq.n	8003866 <_printf_i+0x166>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	079b      	lsls	r3, r3, #30
 8003912:	d413      	bmi.n	800393c <_printf_i+0x23c>
 8003914:	68e0      	ldr	r0, [r4, #12]
 8003916:	9b03      	ldr	r3, [sp, #12]
 8003918:	4298      	cmp	r0, r3
 800391a:	bfb8      	it	lt
 800391c:	4618      	movlt	r0, r3
 800391e:	e7a4      	b.n	800386a <_printf_i+0x16a>
 8003920:	2301      	movs	r3, #1
 8003922:	4632      	mov	r2, r6
 8003924:	4649      	mov	r1, r9
 8003926:	4640      	mov	r0, r8
 8003928:	47d0      	blx	sl
 800392a:	3001      	adds	r0, #1
 800392c:	d09b      	beq.n	8003866 <_printf_i+0x166>
 800392e:	3501      	adds	r5, #1
 8003930:	68e3      	ldr	r3, [r4, #12]
 8003932:	9903      	ldr	r1, [sp, #12]
 8003934:	1a5b      	subs	r3, r3, r1
 8003936:	42ab      	cmp	r3, r5
 8003938:	dcf2      	bgt.n	8003920 <_printf_i+0x220>
 800393a:	e7eb      	b.n	8003914 <_printf_i+0x214>
 800393c:	2500      	movs	r5, #0
 800393e:	f104 0619 	add.w	r6, r4, #25
 8003942:	e7f5      	b.n	8003930 <_printf_i+0x230>
 8003944:	08003c63 	.word	0x08003c63
 8003948:	08003c74 	.word	0x08003c74

0800394c <memchr>:
 800394c:	4603      	mov	r3, r0
 800394e:	b510      	push	{r4, lr}
 8003950:	b2c9      	uxtb	r1, r1
 8003952:	4402      	add	r2, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	4618      	mov	r0, r3
 8003958:	d101      	bne.n	800395e <memchr+0x12>
 800395a:	2000      	movs	r0, #0
 800395c:	e003      	b.n	8003966 <memchr+0x1a>
 800395e:	7804      	ldrb	r4, [r0, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	428c      	cmp	r4, r1
 8003964:	d1f6      	bne.n	8003954 <memchr+0x8>
 8003966:	bd10      	pop	{r4, pc}

08003968 <memcpy>:
 8003968:	440a      	add	r2, r1
 800396a:	4291      	cmp	r1, r2
 800396c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003970:	d100      	bne.n	8003974 <memcpy+0xc>
 8003972:	4770      	bx	lr
 8003974:	b510      	push	{r4, lr}
 8003976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800397a:	4291      	cmp	r1, r2
 800397c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003980:	d1f9      	bne.n	8003976 <memcpy+0xe>
 8003982:	bd10      	pop	{r4, pc}

08003984 <memmove>:
 8003984:	4288      	cmp	r0, r1
 8003986:	b510      	push	{r4, lr}
 8003988:	eb01 0402 	add.w	r4, r1, r2
 800398c:	d902      	bls.n	8003994 <memmove+0x10>
 800398e:	4284      	cmp	r4, r0
 8003990:	4623      	mov	r3, r4
 8003992:	d807      	bhi.n	80039a4 <memmove+0x20>
 8003994:	1e43      	subs	r3, r0, #1
 8003996:	42a1      	cmp	r1, r4
 8003998:	d008      	beq.n	80039ac <memmove+0x28>
 800399a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800399e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039a2:	e7f8      	b.n	8003996 <memmove+0x12>
 80039a4:	4601      	mov	r1, r0
 80039a6:	4402      	add	r2, r0
 80039a8:	428a      	cmp	r2, r1
 80039aa:	d100      	bne.n	80039ae <memmove+0x2a>
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039b6:	e7f7      	b.n	80039a8 <memmove+0x24>

080039b8 <_free_r>:
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	4605      	mov	r5, r0
 80039bc:	2900      	cmp	r1, #0
 80039be:	d043      	beq.n	8003a48 <_free_r+0x90>
 80039c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039c4:	1f0c      	subs	r4, r1, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bfb8      	it	lt
 80039ca:	18e4      	addlt	r4, r4, r3
 80039cc:	f000 f8d0 	bl	8003b70 <__malloc_lock>
 80039d0:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <_free_r+0x94>)
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	4610      	mov	r0, r2
 80039d6:	b933      	cbnz	r3, 80039e6 <_free_r+0x2e>
 80039d8:	6063      	str	r3, [r4, #4]
 80039da:	6014      	str	r4, [r2, #0]
 80039dc:	4628      	mov	r0, r5
 80039de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039e2:	f000 b8cb 	b.w	8003b7c <__malloc_unlock>
 80039e6:	42a3      	cmp	r3, r4
 80039e8:	d90a      	bls.n	8003a00 <_free_r+0x48>
 80039ea:	6821      	ldr	r1, [r4, #0]
 80039ec:	1862      	adds	r2, r4, r1
 80039ee:	4293      	cmp	r3, r2
 80039f0:	bf01      	itttt	eq
 80039f2:	681a      	ldreq	r2, [r3, #0]
 80039f4:	685b      	ldreq	r3, [r3, #4]
 80039f6:	1852      	addeq	r2, r2, r1
 80039f8:	6022      	streq	r2, [r4, #0]
 80039fa:	6063      	str	r3, [r4, #4]
 80039fc:	6004      	str	r4, [r0, #0]
 80039fe:	e7ed      	b.n	80039dc <_free_r+0x24>
 8003a00:	461a      	mov	r2, r3
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	b10b      	cbz	r3, 8003a0a <_free_r+0x52>
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	d9fa      	bls.n	8003a00 <_free_r+0x48>
 8003a0a:	6811      	ldr	r1, [r2, #0]
 8003a0c:	1850      	adds	r0, r2, r1
 8003a0e:	42a0      	cmp	r0, r4
 8003a10:	d10b      	bne.n	8003a2a <_free_r+0x72>
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	4401      	add	r1, r0
 8003a16:	1850      	adds	r0, r2, r1
 8003a18:	4283      	cmp	r3, r0
 8003a1a:	6011      	str	r1, [r2, #0]
 8003a1c:	d1de      	bne.n	80039dc <_free_r+0x24>
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4401      	add	r1, r0
 8003a24:	6011      	str	r1, [r2, #0]
 8003a26:	6053      	str	r3, [r2, #4]
 8003a28:	e7d8      	b.n	80039dc <_free_r+0x24>
 8003a2a:	d902      	bls.n	8003a32 <_free_r+0x7a>
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	e7d4      	b.n	80039dc <_free_r+0x24>
 8003a32:	6820      	ldr	r0, [r4, #0]
 8003a34:	1821      	adds	r1, r4, r0
 8003a36:	428b      	cmp	r3, r1
 8003a38:	bf01      	itttt	eq
 8003a3a:	6819      	ldreq	r1, [r3, #0]
 8003a3c:	685b      	ldreq	r3, [r3, #4]
 8003a3e:	1809      	addeq	r1, r1, r0
 8003a40:	6021      	streq	r1, [r4, #0]
 8003a42:	6063      	str	r3, [r4, #4]
 8003a44:	6054      	str	r4, [r2, #4]
 8003a46:	e7c9      	b.n	80039dc <_free_r+0x24>
 8003a48:	bd38      	pop	{r3, r4, r5, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200000b8 	.word	0x200000b8

08003a50 <_malloc_r>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	1ccd      	adds	r5, r1, #3
 8003a54:	f025 0503 	bic.w	r5, r5, #3
 8003a58:	3508      	adds	r5, #8
 8003a5a:	2d0c      	cmp	r5, #12
 8003a5c:	bf38      	it	cc
 8003a5e:	250c      	movcc	r5, #12
 8003a60:	2d00      	cmp	r5, #0
 8003a62:	4606      	mov	r6, r0
 8003a64:	db01      	blt.n	8003a6a <_malloc_r+0x1a>
 8003a66:	42a9      	cmp	r1, r5
 8003a68:	d903      	bls.n	8003a72 <_malloc_r+0x22>
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	2000      	movs	r0, #0
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a72:	f000 f87d 	bl	8003b70 <__malloc_lock>
 8003a76:	4921      	ldr	r1, [pc, #132]	; (8003afc <_malloc_r+0xac>)
 8003a78:	680a      	ldr	r2, [r1, #0]
 8003a7a:	4614      	mov	r4, r2
 8003a7c:	b99c      	cbnz	r4, 8003aa6 <_malloc_r+0x56>
 8003a7e:	4f20      	ldr	r7, [pc, #128]	; (8003b00 <_malloc_r+0xb0>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b923      	cbnz	r3, 8003a8e <_malloc_r+0x3e>
 8003a84:	4621      	mov	r1, r4
 8003a86:	4630      	mov	r0, r6
 8003a88:	f000 f862 	bl	8003b50 <_sbrk_r>
 8003a8c:	6038      	str	r0, [r7, #0]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 f85d 	bl	8003b50 <_sbrk_r>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	d123      	bne.n	8003ae2 <_malloc_r+0x92>
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	6033      	str	r3, [r6, #0]
 8003aa0:	f000 f86c 	bl	8003b7c <__malloc_unlock>
 8003aa4:	e7e3      	b.n	8003a6e <_malloc_r+0x1e>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	1b5b      	subs	r3, r3, r5
 8003aaa:	d417      	bmi.n	8003adc <_malloc_r+0x8c>
 8003aac:	2b0b      	cmp	r3, #11
 8003aae:	d903      	bls.n	8003ab8 <_malloc_r+0x68>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	441c      	add	r4, r3
 8003ab4:	6025      	str	r5, [r4, #0]
 8003ab6:	e004      	b.n	8003ac2 <_malloc_r+0x72>
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	42a2      	cmp	r2, r4
 8003abc:	bf0c      	ite	eq
 8003abe:	600b      	streq	r3, [r1, #0]
 8003ac0:	6053      	strne	r3, [r2, #4]
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f000 f85a 	bl	8003b7c <__malloc_unlock>
 8003ac8:	f104 000b 	add.w	r0, r4, #11
 8003acc:	1d23      	adds	r3, r4, #4
 8003ace:	f020 0007 	bic.w	r0, r0, #7
 8003ad2:	1ac2      	subs	r2, r0, r3
 8003ad4:	d0cc      	beq.n	8003a70 <_malloc_r+0x20>
 8003ad6:	1a1b      	subs	r3, r3, r0
 8003ad8:	50a3      	str	r3, [r4, r2]
 8003ada:	e7c9      	b.n	8003a70 <_malloc_r+0x20>
 8003adc:	4622      	mov	r2, r4
 8003ade:	6864      	ldr	r4, [r4, #4]
 8003ae0:	e7cc      	b.n	8003a7c <_malloc_r+0x2c>
 8003ae2:	1cc4      	adds	r4, r0, #3
 8003ae4:	f024 0403 	bic.w	r4, r4, #3
 8003ae8:	42a0      	cmp	r0, r4
 8003aea:	d0e3      	beq.n	8003ab4 <_malloc_r+0x64>
 8003aec:	1a21      	subs	r1, r4, r0
 8003aee:	4630      	mov	r0, r6
 8003af0:	f000 f82e 	bl	8003b50 <_sbrk_r>
 8003af4:	3001      	adds	r0, #1
 8003af6:	d1dd      	bne.n	8003ab4 <_malloc_r+0x64>
 8003af8:	e7cf      	b.n	8003a9a <_malloc_r+0x4a>
 8003afa:	bf00      	nop
 8003afc:	200000b8 	.word	0x200000b8
 8003b00:	200000bc 	.word	0x200000bc

08003b04 <_realloc_r>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	4607      	mov	r7, r0
 8003b08:	4614      	mov	r4, r2
 8003b0a:	460e      	mov	r6, r1
 8003b0c:	b921      	cbnz	r1, 8003b18 <_realloc_r+0x14>
 8003b0e:	4611      	mov	r1, r2
 8003b10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b14:	f7ff bf9c 	b.w	8003a50 <_malloc_r>
 8003b18:	b922      	cbnz	r2, 8003b24 <_realloc_r+0x20>
 8003b1a:	f7ff ff4d 	bl	80039b8 <_free_r>
 8003b1e:	4625      	mov	r5, r4
 8003b20:	4628      	mov	r0, r5
 8003b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b24:	f000 f830 	bl	8003b88 <_malloc_usable_size_r>
 8003b28:	42a0      	cmp	r0, r4
 8003b2a:	d20f      	bcs.n	8003b4c <_realloc_r+0x48>
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f7ff ff8e 	bl	8003a50 <_malloc_r>
 8003b34:	4605      	mov	r5, r0
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d0f2      	beq.n	8003b20 <_realloc_r+0x1c>
 8003b3a:	4631      	mov	r1, r6
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	f7ff ff13 	bl	8003968 <memcpy>
 8003b42:	4631      	mov	r1, r6
 8003b44:	4638      	mov	r0, r7
 8003b46:	f7ff ff37 	bl	80039b8 <_free_r>
 8003b4a:	e7e9      	b.n	8003b20 <_realloc_r+0x1c>
 8003b4c:	4635      	mov	r5, r6
 8003b4e:	e7e7      	b.n	8003b20 <_realloc_r+0x1c>

08003b50 <_sbrk_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	2300      	movs	r3, #0
 8003b54:	4d05      	ldr	r5, [pc, #20]	; (8003b6c <_sbrk_r+0x1c>)
 8003b56:	4604      	mov	r4, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	f7fc ff6c 	bl	8000a38 <_sbrk>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_sbrk_r+0x1a>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_sbrk_r+0x1a>
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	200001e4 	.word	0x200001e4

08003b70 <__malloc_lock>:
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <__malloc_lock+0x8>)
 8003b72:	f000 b811 	b.w	8003b98 <__retarget_lock_acquire_recursive>
 8003b76:	bf00      	nop
 8003b78:	200001ec 	.word	0x200001ec

08003b7c <__malloc_unlock>:
 8003b7c:	4801      	ldr	r0, [pc, #4]	; (8003b84 <__malloc_unlock+0x8>)
 8003b7e:	f000 b80c 	b.w	8003b9a <__retarget_lock_release_recursive>
 8003b82:	bf00      	nop
 8003b84:	200001ec 	.word	0x200001ec

08003b88 <_malloc_usable_size_r>:
 8003b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b8c:	1f18      	subs	r0, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bfbc      	itt	lt
 8003b92:	580b      	ldrlt	r3, [r1, r0]
 8003b94:	18c0      	addlt	r0, r0, r3
 8003b96:	4770      	bx	lr

08003b98 <__retarget_lock_acquire_recursive>:
 8003b98:	4770      	bx	lr

08003b9a <__retarget_lock_release_recursive>:
 8003b9a:	4770      	bx	lr

08003b9c <_init>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr

08003ba8 <_fini>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	bf00      	nop
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr
