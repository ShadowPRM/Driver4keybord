
Driver4keybord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de8  08002de8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002de8  08002de8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de8  08002de8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08002dfc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002dfc  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd83  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eac  00000000  00000000  0002ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0002fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  000308a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e1f  00000000  00000000  00031410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e380  00000000  00000000  0004922f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa53  00000000  00000000  000575af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003238  00000000  00000000  000e2058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002da4 	.word	0x08002da4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002da4 	.word	0x08002da4

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b3f      	ldr	r3, [pc, #252]	; (8000260 <MX_GPIO_Init+0x114>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a3e      	ldr	r2, [pc, #248]	; (8000260 <MX_GPIO_Init+0x114>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b3c      	ldr	r3, [pc, #240]	; (8000260 <MX_GPIO_Init+0x114>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b39      	ldr	r3, [pc, #228]	; (8000260 <MX_GPIO_Init+0x114>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a38      	ldr	r2, [pc, #224]	; (8000260 <MX_GPIO_Init+0x114>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b36      	ldr	r3, [pc, #216]	; (8000260 <MX_GPIO_Init+0x114>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b33      	ldr	r3, [pc, #204]	; (8000260 <MX_GPIO_Init+0x114>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a32      	ldr	r2, [pc, #200]	; (8000260 <MX_GPIO_Init+0x114>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b30      	ldr	r3, [pc, #192]	; (8000260 <MX_GPIO_Init+0x114>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a8:	4b2d      	ldr	r3, [pc, #180]	; (8000260 <MX_GPIO_Init+0x114>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a2c      	ldr	r2, [pc, #176]	; (8000260 <MX_GPIO_Init+0x114>)
 80001ae:	f043 0304 	orr.w	r3, r3, #4
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b2a      	ldr	r3, [pc, #168]	; (8000260 <MX_GPIO_Init+0x114>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0304 	and.w	r3, r3, #4
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedDbg_GPIO_Port, LedDbg_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4827      	ldr	r0, [pc, #156]	; (8000264 <MX_GPIO_Init+0x118>)
 80001c8:	f001 f86a 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(adr2out2_GPIO_Port, adr2out2_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d2:	4825      	ldr	r0, [pc, #148]	; (8000268 <MX_GPIO_Init+0x11c>)
 80001d4:	f001 f864 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, adr1out1_Pin|adr0out0_Pin, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80001de:	4823      	ldr	r0, [pc, #140]	; (800026c <MX_GPIO_Init+0x120>)
 80001e0:	f001 f85e 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LedDbg_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ea:	2301      	movs	r3, #1
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LedDbg_GPIO_Port, &GPIO_InitStruct);
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	4619      	mov	r1, r3
 80001fc:	4819      	ldr	r0, [pc, #100]	; (8000264 <MX_GPIO_Init+0x118>)
 80001fe:	f000 fecb 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = adr5in2_Pin|adr4in1_Pin|adr3in0_Pin;
 8000202:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000208:	2300      	movs	r3, #0
 800020a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800020c:	2301      	movs	r3, #1
 800020e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000210:	f107 0310 	add.w	r3, r7, #16
 8000214:	4619      	mov	r1, r3
 8000216:	4814      	ldr	r0, [pc, #80]	; (8000268 <MX_GPIO_Init+0x11c>)
 8000218:	f000 febe 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = adr2out2_Pin;
 800021c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000222:	2311      	movs	r3, #17
 8000224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000226:	2301      	movs	r3, #1
 8000228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022a:	2303      	movs	r3, #3
 800022c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(adr2out2_GPIO_Port, &GPIO_InitStruct);
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	4619      	mov	r1, r3
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <MX_GPIO_Init+0x11c>)
 8000236:	f000 feaf 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = adr1out1_Pin|adr0out0_Pin;
 800023a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800023e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000240:	2311      	movs	r3, #17
 8000242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000244:	2301      	movs	r3, #1
 8000246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000248:	2303      	movs	r3, #3
 800024a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800024c:	f107 0310 	add.w	r3, r7, #16
 8000250:	4619      	mov	r1, r3
 8000252:	4806      	ldr	r0, [pc, #24]	; (800026c <MX_GPIO_Init+0x120>)
 8000254:	f000 fea0 	bl	8000f98 <HAL_GPIO_Init>

}
 8000258:	bf00      	nop
 800025a:	3720      	adds	r7, #32
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40021000 	.word	0x40021000
 8000264:	40011000 	.word	0x40011000
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40010800 	.word	0x40010800

08000270 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1){		// каждые 10мс
		//LedDbg_GPIO_Port->ODR ^= LedDbg_Pin;
	}
	if(htim->Instance==TIM2){		// каждые 10мкс
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000280:	d118      	bne.n	80002b4 <HAL_TIM_PeriodElapsedCallback+0x44>
		if (adrOprosa) {oprosStart=1;} else {countOprKB++;}
 8000282:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d003      	beq.n	8000294 <HAL_TIM_PeriodElapsedCallback+0x24>
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	e004      	b.n	800029e <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	3301      	adds	r3, #1
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800029c:	6013      	str	r3, [r2, #0]
		if (countOprKB>=PER_OPR_KB) {oprosStart=1;
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002a6:	d305      	bcc.n	80002b4 <HAL_TIM_PeriodElapsedCallback+0x44>
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]
		countOprKB=0;} // oprosKB=1;
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
	} //end  10мс
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	2000002c 	.word	0x2000002c
 80002c4:	2000002d 	.word	0x2000002d
 80002c8:	20000030 	.word	0x20000030

080002cc <OprosKeybord>:
	if(GPIO_Pin == adr0out0_Pin){ // если прерывание поступило от ножки PA9
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
	}
}*/

uint8_t OprosKeybord (uint8_t adres){
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	//uint8_t tekusheeSost=0;
	uint8_t  key1=0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	73fb      	strb	r3, [r7, #15]
	uint8_t  key2=0;
 80002da:	2300      	movs	r3, #0
 80002dc:	73bb      	strb	r3, [r7, #14]
	uint8_t  key3=0;
 80002de:	2300      	movs	r3, #0
 80002e0:	737b      	strb	r3, [r7, #13]

	//Установка кода на HC138 для опроса клавиш (активное состояние л0!)
	if (adres&(1<<0)) {adr0out0_GPIO_Port->ODR |= adr0out0_Pin;} else {adr0out0_GPIO_Port->ODR &=~ adr0out0_Pin;}
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d006      	beq.n	80002fa <OprosKeybord+0x2e>
 80002ec:	4ba0      	ldr	r3, [pc, #640]	; (8000570 <OprosKeybord+0x2a4>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a9f      	ldr	r2, [pc, #636]	; (8000570 <OprosKeybord+0x2a4>)
 80002f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002f6:	60d3      	str	r3, [r2, #12]
 80002f8:	e005      	b.n	8000306 <OprosKeybord+0x3a>
 80002fa:	4b9d      	ldr	r3, [pc, #628]	; (8000570 <OprosKeybord+0x2a4>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	4a9c      	ldr	r2, [pc, #624]	; (8000570 <OprosKeybord+0x2a4>)
 8000300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000304:	60d3      	str	r3, [r2, #12]
	if (adres&(1<<1)) {adr1out1_GPIO_Port->ODR |= adr1out1_Pin;} else {adr1out1_GPIO_Port->ODR &=~ adr1out1_Pin;}
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	f003 0302 	and.w	r3, r3, #2
 800030c:	2b00      	cmp	r3, #0
 800030e:	d006      	beq.n	800031e <OprosKeybord+0x52>
 8000310:	4b97      	ldr	r3, [pc, #604]	; (8000570 <OprosKeybord+0x2a4>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a96      	ldr	r2, [pc, #600]	; (8000570 <OprosKeybord+0x2a4>)
 8000316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031a:	60d3      	str	r3, [r2, #12]
 800031c:	e005      	b.n	800032a <OprosKeybord+0x5e>
 800031e:	4b94      	ldr	r3, [pc, #592]	; (8000570 <OprosKeybord+0x2a4>)
 8000320:	68db      	ldr	r3, [r3, #12]
 8000322:	4a93      	ldr	r2, [pc, #588]	; (8000570 <OprosKeybord+0x2a4>)
 8000324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000328:	60d3      	str	r3, [r2, #12]
	if (adres&(1<<2)) {adr2out2_GPIO_Port->ODR |= adr2out2_Pin;} else {adr2out2_GPIO_Port->ODR &=~ adr2out2_Pin;}
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	2b00      	cmp	r3, #0
 8000332:	d006      	beq.n	8000342 <OprosKeybord+0x76>
 8000334:	4b8f      	ldr	r3, [pc, #572]	; (8000574 <OprosKeybord+0x2a8>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	4a8e      	ldr	r2, [pc, #568]	; (8000574 <OprosKeybord+0x2a8>)
 800033a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800033e:	60d3      	str	r3, [r2, #12]
 8000340:	e005      	b.n	800034e <OprosKeybord+0x82>
 8000342:	4b8c      	ldr	r3, [pc, #560]	; (8000574 <OprosKeybord+0x2a8>)
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	4a8b      	ldr	r2, [pc, #556]	; (8000574 <OprosKeybord+0x2a8>)
 8000348:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800034c:	60d3      	str	r3, [r2, #12]
	adres &= 0b00000111;	//на всякий случай
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 0307 	and.w	r3, r3, #7
 8000354:	71fb      	strb	r3, [r7, #7]

	//Проверка состояния входов (проверяем л0)
	if (adr3in0_GPIO_Port->IDR & adr3in0_Pin)   {key1 &=~ (1<<3); keyKeybord &=~ (1<<(0+adres));}
 8000356:	4b87      	ldr	r3, [pc, #540]	; (8000574 <OprosKeybord+0x2a8>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800035e:	2b00      	cmp	r3, #0
 8000360:	d00f      	beq.n	8000382 <OprosKeybord+0xb6>
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f023 0308 	bic.w	r3, r3, #8
 8000368:	73fb      	strb	r3, [r7, #15]
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	2201      	movs	r2, #1
 800036e:	fa02 f303 	lsl.w	r3, r2, r3
 8000372:	43db      	mvns	r3, r3
 8000374:	461a      	mov	r2, r3
 8000376:	4b80      	ldr	r3, [pc, #512]	; (8000578 <OprosKeybord+0x2ac>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4013      	ands	r3, r2
 800037c:	4a7e      	ldr	r2, [pc, #504]	; (8000578 <OprosKeybord+0x2ac>)
 800037e:	6013      	str	r3, [r2, #0]
 8000380:	e013      	b.n	80003aa <OprosKeybord+0xde>
												else {key1 |= (1<<3);  keyKeybord |= (1<<(0+adres)); kolKeyOn++;}
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	f043 0308 	orr.w	r3, r3, #8
 8000388:	73fb      	strb	r3, [r7, #15]
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2201      	movs	r2, #1
 800038e:	fa02 f303 	lsl.w	r3, r2, r3
 8000392:	461a      	mov	r2, r3
 8000394:	4b78      	ldr	r3, [pc, #480]	; (8000578 <OprosKeybord+0x2ac>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4313      	orrs	r3, r2
 800039a:	4a77      	ldr	r2, [pc, #476]	; (8000578 <OprosKeybord+0x2ac>)
 800039c:	6013      	str	r3, [r2, #0]
 800039e:	4b77      	ldr	r3, [pc, #476]	; (800057c <OprosKeybord+0x2b0>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	3301      	adds	r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b75      	ldr	r3, [pc, #468]	; (800057c <OprosKeybord+0x2b0>)
 80003a8:	701a      	strb	r2, [r3, #0]
	if (adr4in1_GPIO_Port->IDR & adr4in1_Pin)   {key2 &=~ (1<<4); keyKeybord &=~ (1<<(1+adres));}
 80003aa:	4b72      	ldr	r3, [pc, #456]	; (8000574 <OprosKeybord+0x2a8>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d010      	beq.n	80003d8 <OprosKeybord+0x10c>
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	f023 0310 	bic.w	r3, r3, #16
 80003bc:	73bb      	strb	r3, [r7, #14]
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	3301      	adds	r3, #1
 80003c2:	2201      	movs	r2, #1
 80003c4:	fa02 f303 	lsl.w	r3, r2, r3
 80003c8:	43db      	mvns	r3, r3
 80003ca:	461a      	mov	r2, r3
 80003cc:	4b6a      	ldr	r3, [pc, #424]	; (8000578 <OprosKeybord+0x2ac>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4013      	ands	r3, r2
 80003d2:	4a69      	ldr	r2, [pc, #420]	; (8000578 <OprosKeybord+0x2ac>)
 80003d4:	6013      	str	r3, [r2, #0]
 80003d6:	e014      	b.n	8000402 <OprosKeybord+0x136>
												else {key2 |= (1<<4);  keyKeybord |= (1<<(1+adres)); kolKeyOn++;}
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	73bb      	strb	r3, [r7, #14]
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	3301      	adds	r3, #1
 80003e4:	2201      	movs	r2, #1
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	4b62      	ldr	r3, [pc, #392]	; (8000578 <OprosKeybord+0x2ac>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	4a61      	ldr	r2, [pc, #388]	; (8000578 <OprosKeybord+0x2ac>)
 80003f4:	6013      	str	r3, [r2, #0]
 80003f6:	4b61      	ldr	r3, [pc, #388]	; (800057c <OprosKeybord+0x2b0>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	3301      	adds	r3, #1
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4b5f      	ldr	r3, [pc, #380]	; (800057c <OprosKeybord+0x2b0>)
 8000400:	701a      	strb	r2, [r3, #0]
	if (adr5in2_GPIO_Port->IDR & adr5in2_Pin)   {key3 &=~ (1<<5); keyKeybord &=~ (1<<(2+adres));}
 8000402:	4b5c      	ldr	r3, [pc, #368]	; (8000574 <OprosKeybord+0x2a8>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800040a:	2b00      	cmp	r3, #0
 800040c:	d010      	beq.n	8000430 <OprosKeybord+0x164>
 800040e:	7b7b      	ldrb	r3, [r7, #13]
 8000410:	f023 0320 	bic.w	r3, r3, #32
 8000414:	737b      	strb	r3, [r7, #13]
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	3302      	adds	r3, #2
 800041a:	2201      	movs	r2, #1
 800041c:	fa02 f303 	lsl.w	r3, r2, r3
 8000420:	43db      	mvns	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	4b54      	ldr	r3, [pc, #336]	; (8000578 <OprosKeybord+0x2ac>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4013      	ands	r3, r2
 800042a:	4a53      	ldr	r2, [pc, #332]	; (8000578 <OprosKeybord+0x2ac>)
 800042c:	6013      	str	r3, [r2, #0]
 800042e:	e014      	b.n	800045a <OprosKeybord+0x18e>
												else {key3 |= (1<<5);  keyKeybord |= (1<<(2+adres)); kolKeyOn++;}
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	737b      	strb	r3, [r7, #13]
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	3302      	adds	r3, #2
 800043c:	2201      	movs	r2, #1
 800043e:	fa02 f303 	lsl.w	r3, r2, r3
 8000442:	461a      	mov	r2, r3
 8000444:	4b4c      	ldr	r3, [pc, #304]	; (8000578 <OprosKeybord+0x2ac>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4313      	orrs	r3, r2
 800044a:	4a4b      	ldr	r2, [pc, #300]	; (8000578 <OprosKeybord+0x2ac>)
 800044c:	6013      	str	r3, [r2, #0]
 800044e:	4b4b      	ldr	r3, [pc, #300]	; (800057c <OprosKeybord+0x2b0>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4b49      	ldr	r3, [pc, #292]	; (800057c <OprosKeybord+0x2b0>)
 8000458:	701a      	strb	r2, [r3, #0]

	//проверка 3х нажатых в одном столбце
	if (key1 && key2 && key3) {key1=0;key2=0;key3=0; numKey1=0; numKey2=0; adrOprosa=0; return (0xff);}
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d016      	beq.n	800048e <OprosKeybord+0x1c2>
 8000460:	7bbb      	ldrb	r3, [r7, #14]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d013      	beq.n	800048e <OprosKeybord+0x1c2>
 8000466:	7b7b      	ldrb	r3, [r7, #13]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d010      	beq.n	800048e <OprosKeybord+0x1c2>
 800046c:	2300      	movs	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]
 8000470:	2300      	movs	r3, #0
 8000472:	73bb      	strb	r3, [r7, #14]
 8000474:	2300      	movs	r3, #0
 8000476:	737b      	strb	r3, [r7, #13]
 8000478:	4b41      	ldr	r3, [pc, #260]	; (8000580 <OprosKeybord+0x2b4>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	4b41      	ldr	r3, [pc, #260]	; (8000584 <OprosKeybord+0x2b8>)
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
 8000484:	4b40      	ldr	r3, [pc, #256]	; (8000588 <OprosKeybord+0x2bc>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
 800048a:	23ff      	movs	r3, #255	; 0xff
 800048c:	e06b      	b.n	8000566 <OprosKeybord+0x29a>

	//проверка 3х нажатых в общем
	if (numKey1 && numKey2 && (key1|key2|key3)) {key1=0;key2=0;key3=0; numKey1=0; numKey2=0; adrOprosa=0; return (0xff);}
 800048e:	4b3c      	ldr	r3, [pc, #240]	; (8000580 <OprosKeybord+0x2b4>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d01d      	beq.n	80004d2 <OprosKeybord+0x206>
 8000496:	4b3b      	ldr	r3, [pc, #236]	; (8000584 <OprosKeybord+0x2b8>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d019      	beq.n	80004d2 <OprosKeybord+0x206>
 800049e:	7bfa      	ldrb	r2, [r7, #15]
 80004a0:	7bbb      	ldrb	r3, [r7, #14]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	7b7b      	ldrb	r3, [r7, #13]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d010      	beq.n	80004d2 <OprosKeybord+0x206>
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	2300      	movs	r3, #0
 80004b6:	73bb      	strb	r3, [r7, #14]
 80004b8:	2300      	movs	r3, #0
 80004ba:	737b      	strb	r3, [r7, #13]
 80004bc:	4b30      	ldr	r3, [pc, #192]	; (8000580 <OprosKeybord+0x2b4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
 80004c2:	4b30      	ldr	r3, [pc, #192]	; (8000584 <OprosKeybord+0x2b8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
 80004c8:	4b2f      	ldr	r3, [pc, #188]	; (8000588 <OprosKeybord+0x2bc>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
 80004ce:	23ff      	movs	r3, #255	; 0xff
 80004d0:	e049      	b.n	8000566 <OprosKeybord+0x29a>

	//присвоение
	if (!(numKey1)) {
 80004d2:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <OprosKeybord+0x2b4>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d122      	bne.n	8000520 <OprosKeybord+0x254>
		if(key1) {numKey1=key1|adres; key1=0;} else if(key2) {numKey1=key2|adres; key2=0;} else if(key3) {numKey1=key3|adres; key3=0;}
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d008      	beq.n	80004f2 <OprosKeybord+0x226>
 80004e0:	7bfa      	ldrb	r2, [r7, #15]
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b25      	ldr	r3, [pc, #148]	; (8000580 <OprosKeybord+0x2b4>)
 80004ea:	701a      	strb	r2, [r3, #0]
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e016      	b.n	8000520 <OprosKeybord+0x254>
 80004f2:	7bbb      	ldrb	r3, [r7, #14]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d008      	beq.n	800050a <OprosKeybord+0x23e>
 80004f8:	7bba      	ldrb	r2, [r7, #14]
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <OprosKeybord+0x2b4>)
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	2300      	movs	r3, #0
 8000506:	73bb      	strb	r3, [r7, #14]
 8000508:	e00a      	b.n	8000520 <OprosKeybord+0x254>
 800050a:	7b7b      	ldrb	r3, [r7, #13]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d007      	beq.n	8000520 <OprosKeybord+0x254>
 8000510:	7b7a      	ldrb	r2, [r7, #13]
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4313      	orrs	r3, r2
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <OprosKeybord+0x2b4>)
 800051a:	701a      	strb	r2, [r3, #0]
 800051c:	2300      	movs	r3, #0
 800051e:	737b      	strb	r3, [r7, #13]
	}
	if (!(numKey2)) {
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <OprosKeybord+0x2b8>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d11c      	bne.n	8000562 <OprosKeybord+0x296>
		if(key1) {numKey2=key1|adres;} else if(key2) {numKey2=key2|adres;} else if(key3) {numKey2=key3|adres;}
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d006      	beq.n	800053c <OprosKeybord+0x270>
 800052e:	7bfa      	ldrb	r2, [r7, #15]
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4313      	orrs	r3, r2
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <OprosKeybord+0x2b8>)
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	e012      	b.n	8000562 <OprosKeybord+0x296>
 800053c:	7bbb      	ldrb	r3, [r7, #14]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d006      	beq.n	8000550 <OprosKeybord+0x284>
 8000542:	7bba      	ldrb	r2, [r7, #14]
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4313      	orrs	r3, r2
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <OprosKeybord+0x2b8>)
 800054c:	701a      	strb	r2, [r3, #0]
 800054e:	e008      	b.n	8000562 <OprosKeybord+0x296>
 8000550:	7b7b      	ldrb	r3, [r7, #13]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d005      	beq.n	8000562 <OprosKeybord+0x296>
 8000556:	7b7a      	ldrb	r2, [r7, #13]
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4313      	orrs	r3, r2
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <OprosKeybord+0x2b8>)
 8000560:	701a      	strb	r2, [r3, #0]
	}

	//возвращаем количество нажатых
	return (kolKeyOn);
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <OprosKeybord+0x2b0>)
 8000564:	781b      	ldrb	r3, [r3, #0]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40010800 	.word	0x40010800
 8000574:	40010c00 	.word	0x40010c00
 8000578:	20000028 	.word	0x20000028
 800057c:	20000040 	.word	0x20000040
 8000580:	2000003c 	.word	0x2000003c
 8000584:	2000003d 	.word	0x2000003d
 8000588:	2000002c 	.word	0x2000002c

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fadf 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f887 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f7ff fdd7 	bl	800014c <MX_GPIO_Init>
  MX_TIM1_Init();
 800059e:	f000 f94b 	bl	8000838 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005a2:	f000 f999 	bl	80008d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005a6:	f000 fa23 	bl	80009f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005aa:	4833      	ldr	r0, [pc, #204]	; (8000678 <main+0xec>)
 80005ac:	f001 faee 	bl	8001b8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80005b0:	4832      	ldr	r0, [pc, #200]	; (800067c <main+0xf0>)
 80005b2:	f001 faeb 	bl	8001b8c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1){
	uint16_t sizeString=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	80fb      	strh	r3, [r7, #6]
	uint8_t kolNaj=0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	717b      	strb	r3, [r7, #5]
	 * (вприципе можно поднять частоту опроса)
	 * В майне запускается опрос одного столбца клавиш
	 * ! Задать частоту опроса всей клавиатуры
	 * ! Включить прерывания на входах
	 * ! От прерывания по входу, отсчитывать время удержания клавиши*/
	if (oprosStart){
 80005be:	4b30      	ldr	r3, [pc, #192]	; (8000680 <main+0xf4>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d01c      	beq.n	8000602 <main+0x76>
		kolNaj = OprosKeybord(adrOprosa);
 80005c8:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <main+0xf8>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe7c 	bl	80002cc <OprosKeybord>
 80005d4:	4603      	mov	r3, r0
 80005d6:	717b      	strb	r3, [r7, #5]
		adrOprosa++;
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <main+0xf8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	3301      	adds	r3, #1
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <main+0xf8>)
 80005e4:	701a      	strb	r2, [r3, #0]
		//у HC 8 состояний выхода (в каждом по 3 кнопки)
		if (adrOprosa>=8){adrOprosa=0;oprosKB=1;}
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <main+0xf8>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b07      	cmp	r3, #7
 80005ee:	d905      	bls.n	80005fc <main+0x70>
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <main+0xf8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	4b24      	ldr	r3, [pc, #144]	; (8000688 <main+0xfc>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
		oprosStart=0;
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <main+0xf4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
	}

	if (oprosKB){	//((!(countOprKB)) &&
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <main+0xfc>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0d4      	beq.n	80005b6 <main+0x2a>
		//LedDbg_GPIO_Port->ODR ^= LedDbg_Pin;
		if (numKey1) {
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <main+0x100>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d00f      	beq.n	8000634 <main+0xa8>
			if(numKey1==najKey1) {countKey1++;} else {najKey1=numKey1;}
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <main+0x100>)
 8000616:	781a      	ldrb	r2, [r3, #0]
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <main+0x104>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	d105      	bne.n	800062c <main+0xa0>
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <main+0x108>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <main+0x108>)
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e003      	b.n	8000634 <main+0xa8>
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <main+0x100>)
 800062e:	781a      	ldrb	r2, [r3, #0]
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <main+0x104>)
 8000632:	701a      	strb	r2, [r3, #0]
		}
		if (numKey2) {
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <main+0x10c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00f      	beq.n	800065c <main+0xd0>
			if(numKey2==najKey2) {countKey2++;} else {najKey2=numKey2;}
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <main+0x10c>)
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <main+0x110>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	d105      	bne.n	8000654 <main+0xc8>
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <main+0x114>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <main+0x114>)
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	e003      	b.n	800065c <main+0xd0>
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <main+0x10c>)
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <main+0x110>)
 800065a:	701a      	strb	r2, [r3, #0]
		}
		if (countKey1>=132){LedDbg_GPIO_Port->ODR ^= LedDbg_Pin;}
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <main+0x108>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b83      	cmp	r3, #131	; 0x83
 8000662:	d905      	bls.n	8000670 <main+0xe4>
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <main+0x118>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <main+0x118>)
 800066a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800066e:	60d3      	str	r3, [r2, #12]
		if (countKey2>=132){;}
		oprosKB=0;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <main+0xfc>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
while (1){
 8000676:	e79e      	b.n	80005b6 <main+0x2a>
 8000678:	20000044 	.word	0x20000044
 800067c:	2000008c 	.word	0x2000008c
 8000680:	2000002d 	.word	0x2000002d
 8000684:	2000002c 	.word	0x2000002c
 8000688:	2000002e 	.word	0x2000002e
 800068c:	2000003c 	.word	0x2000003c
 8000690:	2000003e 	.word	0x2000003e
 8000694:	20000034 	.word	0x20000034
 8000698:	2000003d 	.word	0x2000003d
 800069c:	2000003f 	.word	0x2000003f
 80006a0:	20000038 	.word	0x20000038
 80006a4:	40011000 	.word	0x40011000

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b090      	sub	sp, #64	; 0x40
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	2228      	movs	r2, #40	; 0x28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fb6c 	bl	8002d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0318 	add.w	r3, r7, #24
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fded 	bl	80012d0 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006fc:	f000 f819 	bl	8000732 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f858 	bl	80017d0 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000726:	f000 f804 	bl	8000732 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3740      	adds	r7, #64	; 0x40
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000736:	b672      	cpsid	i
}
 8000738:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073a:	e7fe      	b.n	800073a <Error_Handler+0x8>

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <HAL_MspInit+0x5c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_MspInit+0x5c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_MspInit+0x60>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <HAL_MspInit+0x60>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000
 800079c:	40010000 	.word	0x40010000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e6:	f000 f9fb 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <TIM1_UP_IRQHandler+0x10>)
 80007f6:	f001 fa1b 	bl	8001c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000044 	.word	0x20000044

08000804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM2_IRQHandler+0x10>)
 800080a:	f001 fa11 	bl	8001c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000008c 	.word	0x2000008c

08000818 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <USART1_IRQHandler+0x10>)
 800081e:	f001 fdb3 	bl	8002388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000d4 	.word	0x200000d4

0800082c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_TIM1_Init+0x9c>)
 8000858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM1_Init+0x98>)
 800085c:	2247      	movs	r2, #71	; 0x47
 800085e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000868:	f242 720f 	movw	r2, #9999	; 0x270f
 800086c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000882:	f001 f933 	bl	8001aec <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800088c:	f7ff ff51 	bl	8000732 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_TIM1_Init+0x98>)
 800089e:	f001 facf 	bl	8001e40 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008a8:	f7ff ff43 	bl	8000732 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM1_Init+0x98>)
 80008ba:	f001 fca5 	bl	8002208 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008c4:	f7ff ff35 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000044 	.word	0x20000044
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM2_Init+0x94>)
 80008f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TIM2_Init+0x94>)
 80008fe:	2247      	movs	r2, #71	; 0x47
 8000900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_TIM2_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM2_Init+0x94>)
 800090a:	2209      	movs	r2, #9
 800090c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_TIM2_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM2_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800091a:	4814      	ldr	r0, [pc, #80]	; (800096c <MX_TIM2_Init+0x94>)
 800091c:	f001 f8e6 	bl	8001aec <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000926:	f7ff ff04 	bl	8000732 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_TIM2_Init+0x94>)
 8000938:	f001 fa82 	bl	8001e40 <HAL_TIM_ConfigClockSource>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000942:	f7ff fef6 	bl	8000732 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_TIM2_Init+0x94>)
 8000954:	f001 fc58 	bl	8002208 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800095e:	f7ff fee8 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000008c 	.word	0x2000008c

08000970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <HAL_TIM_Base_MspInit+0x78>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d114      	bne.n	80009ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_TIM_Base_MspInit+0x7c>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_TIM_Base_MspInit+0x7c>)
 8000988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_TIM_Base_MspInit+0x7c>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2019      	movs	r0, #25
 80009a0:	f000 fa11 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009a4:	2019      	movs	r0, #25
 80009a6:	f000 fa2a 	bl	8000dfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80009aa:	e018      	b.n	80009de <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b4:	d113      	bne.n	80009de <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_TIM_Base_MspInit+0x7c>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <HAL_TIM_Base_MspInit+0x7c>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_TIM_Base_MspInit+0x7c>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	201c      	movs	r0, #28
 80009d4:	f000 f9f7 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009d8:	201c      	movs	r0, #28
 80009da:	f000 fa10 	bl	8000dfe <HAL_NVIC_EnableIRQ>
}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40012c00 	.word	0x40012c00
 80009ec:	40021000 	.word	0x40021000

080009f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART1_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a28:	f001 fc5e 	bl	80022e8 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f7ff fe7e 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000d4 	.word	0x200000d4
 8000a40:	40013800 	.word	0x40013800

08000a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d145      	bne.n	8000af0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a64:	4b25      	ldr	r3, [pc, #148]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a24      	ldr	r2, [pc, #144]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a94:	2340      	movs	r3, #64	; 0x40
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4816      	ldr	r0, [pc, #88]	; (8000b00 <HAL_UART_MspInit+0xbc>)
 8000aa8:	f000 fa76 	bl	8000f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4810      	ldr	r0, [pc, #64]	; (8000b00 <HAL_UART_MspInit+0xbc>)
 8000ac0:	f000 fa6a 	bl	8000f98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_UART_MspInit+0xc0>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_UART_MspInit+0xc0>)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2025      	movs	r0, #37	; 0x25
 8000ae6:	f000 f96e 	bl	8000dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aea:	2025      	movs	r0, #37	; 0x25
 8000aec:	f000 f987 	bl	8000dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	40010000 	.word	0x40010000

08000b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff fe90 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b0e:	490c      	ldr	r1, [pc, #48]	; (8000b40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b10:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b24:	4c09      	ldr	r4, [pc, #36]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f002 f90b 	bl	8002d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fd29 	bl	800058c <main>
  bx lr
 8000b3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b44:	08002df0 	.word	0x08002df0
  ldr r2, =_sbss
 8000b48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b4c:	20000120 	.word	0x20000120

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f923 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fde4 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f93b 	bl	8000e1a <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f903 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	2000011c 	.word	0x2000011c

08000c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	2000011c 	.word	0x2000011c

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4906      	ldr	r1, [pc, #24]	; (8000cb0 <__NVIC_EnableIRQ+0x34>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff90 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff2d 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff42 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff90 	bl	8000d08 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5f 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff35 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa2 	bl	8000d6c <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b085      	sub	sp, #20
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d008      	beq.n	8000e5c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e020      	b.n	8000e9e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 020e 	bic.w	r2, r2, #14
 8000e6a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0201 	bic.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d005      	beq.n	8000ecc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e051      	b.n	8000f70 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 020e 	bic.w	r2, r2, #14
 8000eda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0201 	bic.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <HAL_DMA_Abort_IT+0xd4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d029      	beq.n	8000f4a <HAL_DMA_Abort_IT+0xa2>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <HAL_DMA_Abort_IT+0xd8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d022      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x9e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <HAL_DMA_Abort_IT+0xdc>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01a      	beq.n	8000f40 <HAL_DMA_Abort_IT+0x98>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <HAL_DMA_Abort_IT+0xe0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d012      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x92>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <HAL_DMA_Abort_IT+0xe4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00a      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x8c>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <HAL_DMA_Abort_IT+0xe8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <HAL_DMA_Abort_IT+0x86>
 8000f28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f2c:	e00e      	b.n	8000f4c <HAL_DMA_Abort_IT+0xa4>
 8000f2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f32:	e00b      	b.n	8000f4c <HAL_DMA_Abort_IT+0xa4>
 8000f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f38:	e008      	b.n	8000f4c <HAL_DMA_Abort_IT+0xa4>
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	e005      	b.n	8000f4c <HAL_DMA_Abort_IT+0xa4>
 8000f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f44:	e002      	b.n	8000f4c <HAL_DMA_Abort_IT+0xa4>
 8000f46:	2310      	movs	r3, #16
 8000f48:	e000      	b.n	8000f4c <HAL_DMA_Abort_IT+0xa4>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_DMA_Abort_IT+0xec>)
 8000f4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	4798      	blx	r3
    } 
  }
  return status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020008 	.word	0x40020008
 8000f80:	4002001c 	.word	0x4002001c
 8000f84:	40020030 	.word	0x40020030
 8000f88:	40020044 	.word	0x40020044
 8000f8c:	40020058 	.word	0x40020058
 8000f90:	4002006c 	.word	0x4002006c
 8000f94:	40020000 	.word	0x40020000

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b08b      	sub	sp, #44	; 0x2c
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000faa:	e169      	b.n	8001280 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fac:	2201      	movs	r2, #1
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 8158 	bne.w	800127a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a9a      	ldr	r2, [pc, #616]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05e      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a98      	ldr	r2, [pc, #608]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d875      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000fda:	4a98      	ldr	r2, [pc, #608]	; (800123c <HAL_GPIO_Init+0x2a4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d058      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000fe0:	4a96      	ldr	r2, [pc, #600]	; (800123c <HAL_GPIO_Init+0x2a4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d86f      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000fe6:	4a96      	ldr	r2, [pc, #600]	; (8001240 <HAL_GPIO_Init+0x2a8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d052      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000fec:	4a94      	ldr	r2, [pc, #592]	; (8001240 <HAL_GPIO_Init+0x2a8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d869      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000ff2:	4a94      	ldr	r2, [pc, #592]	; (8001244 <HAL_GPIO_Init+0x2ac>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d04c      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a92      	ldr	r2, [pc, #584]	; (8001244 <HAL_GPIO_Init+0x2ac>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d863      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000ffe:	4a92      	ldr	r2, [pc, #584]	; (8001248 <HAL_GPIO_Init+0x2b0>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d046      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8001004:	4a90      	ldr	r2, [pc, #576]	; (8001248 <HAL_GPIO_Init+0x2b0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d85d      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 800100a:	2b12      	cmp	r3, #18
 800100c:	d82a      	bhi.n	8001064 <HAL_GPIO_Init+0xcc>
 800100e:	2b12      	cmp	r3, #18
 8001010:	d859      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <HAL_GPIO_Init+0x80>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001093 	.word	0x08001093
 800101c:	0800106d 	.word	0x0800106d
 8001020:	0800107f 	.word	0x0800107f
 8001024:	080010c1 	.word	0x080010c1
 8001028:	080010c7 	.word	0x080010c7
 800102c:	080010c7 	.word	0x080010c7
 8001030:	080010c7 	.word	0x080010c7
 8001034:	080010c7 	.word	0x080010c7
 8001038:	080010c7 	.word	0x080010c7
 800103c:	080010c7 	.word	0x080010c7
 8001040:	080010c7 	.word	0x080010c7
 8001044:	080010c7 	.word	0x080010c7
 8001048:	080010c7 	.word	0x080010c7
 800104c:	080010c7 	.word	0x080010c7
 8001050:	080010c7 	.word	0x080010c7
 8001054:	080010c7 	.word	0x080010c7
 8001058:	080010c7 	.word	0x080010c7
 800105c:	08001075 	.word	0x08001075
 8001060:	08001089 	.word	0x08001089
 8001064:	4a79      	ldr	r2, [pc, #484]	; (800124c <HAL_GPIO_Init+0x2b4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800106a:	e02c      	b.n	80010c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e029      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	3304      	adds	r3, #4
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	e024      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	3308      	adds	r3, #8
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e01f      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	330c      	adds	r3, #12
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e01a      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800109a:	2304      	movs	r3, #4
 800109c:	623b      	str	r3, [r7, #32]
          break;
 800109e:	e013      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	611a      	str	r2, [r3, #16]
          break;
 80010b2:	e009      	b.n	80010c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b4:	2308      	movs	r3, #8
 80010b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	615a      	str	r2, [r3, #20]
          break;
 80010be:	e003      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
          break;
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          break;
 80010c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2bff      	cmp	r3, #255	; 0xff
 80010cc:	d801      	bhi.n	80010d2 <HAL_GPIO_Init+0x13a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	e001      	b.n	80010d6 <HAL_GPIO_Init+0x13e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3304      	adds	r3, #4
 80010d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2bff      	cmp	r3, #255	; 0xff
 80010dc:	d802      	bhi.n	80010e4 <HAL_GPIO_Init+0x14c>
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	e002      	b.n	80010ea <HAL_GPIO_Init+0x152>
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	3b08      	subs	r3, #8
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	210f      	movs	r1, #15
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	6a39      	ldr	r1, [r7, #32]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	431a      	orrs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80b1 	beq.w	800127a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001118:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <HAL_GPIO_Init+0x2b8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <HAL_GPIO_Init+0x2b8>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <HAL_GPIO_Init+0x2b8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001130:	4a48      	ldr	r2, [pc, #288]	; (8001254 <HAL_GPIO_Init+0x2bc>)
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a40      	ldr	r2, [pc, #256]	; (8001258 <HAL_GPIO_Init+0x2c0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d013      	beq.n	8001184 <HAL_GPIO_Init+0x1ec>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a3f      	ldr	r2, [pc, #252]	; (800125c <HAL_GPIO_Init+0x2c4>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d00d      	beq.n	8001180 <HAL_GPIO_Init+0x1e8>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3e      	ldr	r2, [pc, #248]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d007      	beq.n	800117c <HAL_GPIO_Init+0x1e4>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <HAL_GPIO_Init+0x2cc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d101      	bne.n	8001178 <HAL_GPIO_Init+0x1e0>
 8001174:	2303      	movs	r3, #3
 8001176:	e006      	b.n	8001186 <HAL_GPIO_Init+0x1ee>
 8001178:	2304      	movs	r3, #4
 800117a:	e004      	b.n	8001186 <HAL_GPIO_Init+0x1ee>
 800117c:	2302      	movs	r3, #2
 800117e:	e002      	b.n	8001186 <HAL_GPIO_Init+0x1ee>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <HAL_GPIO_Init+0x1ee>
 8001184:	2300      	movs	r3, #0
 8001186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001188:	f002 0203 	and.w	r2, r2, #3
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	4093      	lsls	r3, r2
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001196:	492f      	ldr	r1, [pc, #188]	; (8001254 <HAL_GPIO_Init+0x2bc>)
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	492c      	ldr	r1, [pc, #176]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	608b      	str	r3, [r1, #8]
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4928      	ldr	r1, [pc, #160]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	4922      	ldr	r1, [pc, #136]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	60cb      	str	r3, [r1, #12]
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	491e      	ldr	r1, [pc, #120]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4918      	ldr	r1, [pc, #96]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	43db      	mvns	r3, r3
 8001216:	4914      	ldr	r1, [pc, #80]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 8001218:	4013      	ands	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d021      	beq.n	800126c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	490e      	ldr	r1, [pc, #56]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
 8001234:	e021      	b.n	800127a <HAL_GPIO_Init+0x2e2>
 8001236:	bf00      	nop
 8001238:	10320000 	.word	0x10320000
 800123c:	10310000 	.word	0x10310000
 8001240:	10220000 	.word	0x10220000
 8001244:	10210000 	.word	0x10210000
 8001248:	10120000 	.word	0x10120000
 800124c:	10110000 	.word	0x10110000
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	40010800 	.word	0x40010800
 800125c:	40010c00 	.word	0x40010c00
 8001260:	40011000 	.word	0x40011000
 8001264:	40011400 	.word	0x40011400
 8001268:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_GPIO_Init+0x304>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	43db      	mvns	r3, r3
 8001274:	4909      	ldr	r1, [pc, #36]	; (800129c <HAL_GPIO_Init+0x304>)
 8001276:	4013      	ands	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	3301      	adds	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	fa22 f303 	lsr.w	r3, r2, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	f47f ae8e 	bne.w	8000fac <HAL_GPIO_Init+0x14>
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	372c      	adds	r7, #44	; 0x2c
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40010400 	.word	0x40010400

080012a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
 80012ac:	4613      	mov	r3, r2
 80012ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b0:	787b      	ldrb	r3, [r7, #1]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012bc:	e003      	b.n	80012c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	041a      	lsls	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e26c      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8087 	beq.w	80013fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f0:	4b92      	ldr	r3, [pc, #584]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d00c      	beq.n	8001316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012fc:	4b8f      	ldr	r3, [pc, #572]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d112      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
 8001308:	4b8c      	ldr	r3, [pc, #560]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d06c      	beq.n	80013fc <HAL_RCC_OscConfig+0x12c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d168      	bne.n	80013fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e246      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x76>
 8001338:	4b80      	ldr	r3, [pc, #512]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a7f      	ldr	r2, [pc, #508]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e02e      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b7b      	ldr	r3, [pc, #492]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a7a      	ldr	r2, [pc, #488]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b78      	ldr	r3, [pc, #480]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a77      	ldr	r2, [pc, #476]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0xbc>
 8001372:	4b72      	ldr	r3, [pc, #456]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a71      	ldr	r2, [pc, #452]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b6f      	ldr	r3, [pc, #444]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 800138c:	4b6b      	ldr	r3, [pc, #428]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6a      	ldr	r2, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a67      	ldr	r2, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc2a 	bl	8000c04 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc26 	bl	8000c04 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e1fa      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe4>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc16 	bl	8000c04 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc12 	bl	8000c04 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1e6      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x10c>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140a:	4b4c      	ldr	r3, [pc, #304]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1ba      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4939      	ldr	r1, [pc, #228]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fbcb 	bl	8000c04 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fbc7 	bl	8000c04 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e19b      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4927      	ldr	r1, [pc, #156]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fbaa 	bl	8000c04 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fba6 	bl	8000c04 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e17a      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d03a      	beq.n	8001554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d019      	beq.n	800151a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_RCC_OscConfig+0x274>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fb8a 	bl	8000c04 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fb86 	bl	8000c04 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e15a      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 facc 	bl	8001ab0 <RCC_Delay>
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_RCC_OscConfig+0x274>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001520:	f7ff fb70 	bl	8000c04 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001526:	e00f      	b.n	8001548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fb6c 	bl	8000c04 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d908      	bls.n	8001548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e140      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	42420000 	.word	0x42420000
 8001544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	4b9e      	ldr	r3, [pc, #632]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e9      	bne.n	8001528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80a6 	beq.w	80016ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b97      	ldr	r3, [pc, #604]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10d      	bne.n	800158e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b94      	ldr	r3, [pc, #592]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a93      	ldr	r2, [pc, #588]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b91      	ldr	r3, [pc, #580]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b8e      	ldr	r3, [pc, #568]	; (80017c8 <HAL_RCC_OscConfig+0x4f8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b8b      	ldr	r3, [pc, #556]	; (80017c8 <HAL_RCC_OscConfig+0x4f8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a8a      	ldr	r2, [pc, #552]	; (80017c8 <HAL_RCC_OscConfig+0x4f8>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb2d 	bl	8000c04 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fb29 	bl	8000c04 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0fd      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_OscConfig+0x4f8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x312>
 80015d4:	4b7b      	ldr	r3, [pc, #492]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a7a      	ldr	r2, [pc, #488]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	e02d      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x334>
 80015ea:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4b73      	ldr	r3, [pc, #460]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a72      	ldr	r2, [pc, #456]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	e01c      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d10c      	bne.n	8001626 <HAL_RCC_OscConfig+0x356>
 800160c:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a6c      	ldr	r2, [pc, #432]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a69      	ldr	r2, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	e00b      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001626:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a66      	ldr	r2, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b64      	ldr	r3, [pc, #400]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a63      	ldr	r2, [pc, #396]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fadd 	bl	8000c04 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fad9 	bl	8000c04 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0ab      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ee      	beq.n	800164e <HAL_RCC_OscConfig+0x37e>
 8001670:	e014      	b.n	800169c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff fac7 	bl	8000c04 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff fac3 	bl	8000c04 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e095      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ee      	bne.n	800167a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d105      	bne.n	80016ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a2:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a47      	ldr	r2, [pc, #284]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8081 	beq.w	80017ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d061      	beq.n	8001788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d146      	bne.n	800175a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <HAL_RCC_OscConfig+0x4fc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa97 	bl	8000c04 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fa93 	bl	8000c04 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e067      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001700:	d108      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	492d      	ldr	r1, [pc, #180]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a19      	ldr	r1, [r3, #32]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	430b      	orrs	r3, r1
 8001726:	4927      	ldr	r1, [pc, #156]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_RCC_OscConfig+0x4fc>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff fa67 	bl	8000c04 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff fa63 	bl	8000c04 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e037      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x46a>
 8001758:	e02f      	b.n	80017ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_RCC_OscConfig+0x4fc>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fa50 	bl	8000c04 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fa4c 	bl	8000c04 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e020      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x498>
 8001786:	e018      	b.n	80017ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e013      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_OscConfig+0x4f4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40007000 	.word	0x40007000
 80017cc:	42420060 	.word	0x42420060

080017d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0d0      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d910      	bls.n	8001814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 0207 	bic.w	r2, r3, #7
 80017fa:	4965      	ldr	r1, [pc, #404]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0b8      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001836:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800184e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	494d      	ldr	r1, [pc, #308]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d040      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d115      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e073      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06b      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4936      	ldr	r1, [pc, #216]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c0:	f7ff f9a0 	bl	8000c04 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	e00a      	b.n	80018de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c8:	f7ff f99c 	bl	8000c04 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e053      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 020c 	and.w	r2, r3, #12
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1eb      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d210      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0207 	bic.w	r2, r3, #7
 8001906:	4922      	ldr	r1, [pc, #136]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e032      	b.n	8001986 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4916      	ldr	r1, [pc, #88]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800195e:	f000 f821 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490a      	ldr	r1, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x1c8>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1cc>)
 8001978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1d0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f8fe 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40022000 	.word	0x40022000
 8001994:	40021000 	.word	0x40021000
 8001998:	08002dbc 	.word	0x08002dbc
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d002      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x30>
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d003      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x36>
 80019d2:	e027      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80019d6:	613b      	str	r3, [r7, #16]
      break;
 80019d8:	e027      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	0c9b      	lsrs	r3, r3, #18
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e4:	5cd3      	ldrb	r3, [r2, r3]
 80019e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	0c5b      	lsrs	r3, r3, #17
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a06:	fb02 f203 	mul.w	r2, r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e004      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	613b      	str	r3, [r7, #16]
      break;
 8001a22:	e002      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a26:	613b      	str	r3, [r7, #16]
      break;
 8001a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2a:	693b      	ldr	r3, [r7, #16]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	007a1200 	.word	0x007a1200
 8001a40:	08002dd4 	.word	0x08002dd4
 8001a44:	08002de4 	.word	0x08002de4
 8001a48:	003d0900 	.word	0x003d0900

08001a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000000 	.word	0x20000000

08001a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a64:	f7ff fff2 	bl	8001a4c <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08002dcc 	.word	0x08002dcc

08001a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	f7ff ffde 	bl	8001a4c <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0adb      	lsrs	r3, r3, #11
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08002dcc 	.word	0x08002dcc

08001ab0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <RCC_Delay+0x34>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <RCC_Delay+0x38>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0a5b      	lsrs	r3, r3, #9
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	fb02 f303 	mul.w	r3, r2, r3
 8001aca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001acc:	bf00      	nop
  }
  while (Delay --);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	60fa      	str	r2, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f9      	bne.n	8001acc <RCC_Delay+0x1c>
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	10624dd3 	.word	0x10624dd3

08001aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e041      	b.n	8001b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe ff2c 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3304      	adds	r3, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	f000 fa74 	bl	8002018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d001      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e03a      	b.n	8001c1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_TIM_Base_Start_IT+0x98>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00e      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x58>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bce:	d009      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x58>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_TIM_Base_Start_IT+0x9c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x58>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <HAL_TIM_Base_Start_IT+0xa0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d111      	bne.n	8001c08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d010      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c06:	e007      	b.n	8001c18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	40012c00 	.word	0x40012c00
 8001c28:	40000400 	.word	0x40000400
 8001c2c:	40000800 	.word	0x40000800

08001c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0202 	mvn.w	r2, #2
 8001c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f9b4 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f9a7 	bl	8001fce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f9b6 	bl	8001ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0204 	mvn.w	r2, #4
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f98a 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f97d 	bl	8001fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f98c 	bl	8001ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d122      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d11b      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0208 	mvn.w	r2, #8
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f960 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f953 	bl	8001fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f962 	bl	8001ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0210 	mvn.w	r2, #16
 8001d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f936 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f929 	bl	8001fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f938 	bl	8001ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0201 	mvn.w	r2, #1
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fa5e 	bl	8000270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	2b80      	cmp	r3, #128	; 0x80
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	2b80      	cmp	r3, #128	; 0x80
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fa7b 	bl	80022d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b40      	cmp	r3, #64	; 0x40
 8001dfa:	d107      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8fc 	bl	8002004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0220 	mvn.w	r2, #32
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fa46 	bl	80022c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_TIM_ConfigClockSource+0x1c>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e0b4      	b.n	8001fc6 <HAL_TIM_ConfigClockSource+0x186>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e94:	d03e      	beq.n	8001f14 <HAL_TIM_ConfigClockSource+0xd4>
 8001e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e9a:	f200 8087 	bhi.w	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea2:	f000 8086 	beq.w	8001fb2 <HAL_TIM_ConfigClockSource+0x172>
 8001ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eaa:	d87f      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001eac:	2b70      	cmp	r3, #112	; 0x70
 8001eae:	d01a      	beq.n	8001ee6 <HAL_TIM_ConfigClockSource+0xa6>
 8001eb0:	2b70      	cmp	r3, #112	; 0x70
 8001eb2:	d87b      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001eb4:	2b60      	cmp	r3, #96	; 0x60
 8001eb6:	d050      	beq.n	8001f5a <HAL_TIM_ConfigClockSource+0x11a>
 8001eb8:	2b60      	cmp	r3, #96	; 0x60
 8001eba:	d877      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001ebc:	2b50      	cmp	r3, #80	; 0x50
 8001ebe:	d03c      	beq.n	8001f3a <HAL_TIM_ConfigClockSource+0xfa>
 8001ec0:	2b50      	cmp	r3, #80	; 0x50
 8001ec2:	d873      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d058      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0x13a>
 8001ec8:	2b40      	cmp	r3, #64	; 0x40
 8001eca:	d86f      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001ecc:	2b30      	cmp	r3, #48	; 0x30
 8001ece:	d064      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ed0:	2b30      	cmp	r3, #48	; 0x30
 8001ed2:	d86b      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d060      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d867      	bhi.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d05c      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d05a      	beq.n	8001f9a <HAL_TIM_ConfigClockSource+0x15a>
 8001ee4:	e062      	b.n	8001fac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f000 f968 	bl	80021ca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	609a      	str	r2, [r3, #8]
      break;
 8001f12:	e04f      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f000 f951 	bl	80021ca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f36:	609a      	str	r2, [r3, #8]
      break;
 8001f38:	e03c      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	461a      	mov	r2, r3
 8001f48:	f000 f8c8 	bl	80020dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2150      	movs	r1, #80	; 0x50
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f91f 	bl	8002196 <TIM_ITRx_SetConfig>
      break;
 8001f58:	e02c      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f000 f8e6 	bl	8002138 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2160      	movs	r1, #96	; 0x60
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f90f 	bl	8002196 <TIM_ITRx_SetConfig>
      break;
 8001f78:	e01c      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	461a      	mov	r2, r3
 8001f88:	f000 f8a8 	bl	80020dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2140      	movs	r1, #64	; 0x40
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f8ff 	bl	8002196 <TIM_ITRx_SetConfig>
      break;
 8001f98:	e00c      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f000 f8f6 	bl	8002196 <TIM_ITRx_SetConfig>
      break;
 8001faa:	e003      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb0:	e000      	b.n	8001fb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <TIM_Base_SetConfig+0xb8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00b      	beq.n	8002048 <TIM_Base_SetConfig+0x30>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002036:	d007      	beq.n	8002048 <TIM_Base_SetConfig+0x30>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <TIM_Base_SetConfig+0xbc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d003      	beq.n	8002048 <TIM_Base_SetConfig+0x30>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <TIM_Base_SetConfig+0xc0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d108      	bne.n	800205a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <TIM_Base_SetConfig+0xb8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00b      	beq.n	800207a <TIM_Base_SetConfig+0x62>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002068:	d007      	beq.n	800207a <TIM_Base_SetConfig+0x62>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <TIM_Base_SetConfig+0xbc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d003      	beq.n	800207a <TIM_Base_SetConfig+0x62>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <TIM_Base_SetConfig+0xc0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d108      	bne.n	800208c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <TIM_Base_SetConfig+0xb8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d103      	bne.n	80020c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	615a      	str	r2, [r3, #20]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40000800 	.word	0x40000800

080020dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	f023 0201 	bic.w	r2, r3, #1
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f023 030a 	bic.w	r3, r3, #10
 8002118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	621a      	str	r2, [r3, #32]
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	f023 0210 	bic.w	r2, r3, #16
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	031b      	lsls	r3, r3, #12
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002174:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	621a      	str	r2, [r3, #32]
}
 800218c:	bf00      	nop
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f043 0307 	orr.w	r3, r3, #7
 80021b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	609a      	str	r2, [r3, #8]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b087      	sub	sp, #28
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	021a      	lsls	r2, r3, #8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	609a      	str	r2, [r3, #8]
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800221c:	2302      	movs	r3, #2
 800221e:	e046      	b.n	80022ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00e      	beq.n	8002282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226c:	d009      	beq.n	8002282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d004      	beq.n	8002282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10c      	bne.n	800229c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	4313      	orrs	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40012c00 	.word	0x40012c00
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800

080022c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e042      	b.n	8002380 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe fb98 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800232a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fc7f 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0ba      	sub	sp, #232	; 0xe8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_UART_IRQHandler+0x66>
 80023da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fb63 	bl	8002ab2 <UART_Receive_IT>
      return;
 80023ec:	e25b      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80de 	beq.w	80025b4 <HAL_UART_IRQHandler+0x22c>
 80023f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002408:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80d1 	beq.w	80025b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_UART_IRQHandler+0xae>
 800241e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_UART_IRQHandler+0xd2>
 8002442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f043 0202 	orr.w	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_UART_IRQHandler+0xf6>
 8002466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f043 0204 	orr.w	r2, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d011      	beq.n	80024ae <HAL_UART_IRQHandler+0x126>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f043 0208 	orr.w	r2, r3, #8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 81f2 	beq.w	800289c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_UART_IRQHandler+0x14e>
 80024c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 faee 	bl	8002ab2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <HAL_UART_IRQHandler+0x17a>
 80024fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d04f      	beq.n	80025a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f9f8 	bl	80028f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d041      	beq.n	800259a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800252c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3314      	adds	r3, #20
 800253e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002542:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800254e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002552:	e841 2300 	strex	r3, r2, [r1]
 8002556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800255a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1d9      	bne.n	8002516 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d013      	beq.n	8002592 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	4a7e      	ldr	r2, [pc, #504]	; (8002768 <HAL_UART_IRQHandler+0x3e0>)
 8002570:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fc96 	bl	8000ea8 <HAL_DMA_Abort_IT>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800258c:	4610      	mov	r0, r2
 800258e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	e00e      	b.n	80025b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f99c 	bl	80028d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002598:	e00a      	b.n	80025b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f998 	bl	80028d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	e006      	b.n	80025b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f994 	bl	80028d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80025ae:	e175      	b.n	800289c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	bf00      	nop
    return;
 80025b2:	e173      	b.n	800289c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f040 814f 	bne.w	800285c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8148 	beq.w	800285c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8141 	beq.w	800285c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80b6 	beq.w	800276c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800260c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8145 	beq.w	80028a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800261a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800261e:	429a      	cmp	r2, r3
 8002620:	f080 813e 	bcs.w	80028a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800262a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b20      	cmp	r3, #32
 8002634:	f000 8088 	beq.w	8002748 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002646:	e853 3f00 	ldrex	r3, [r3]
 800264a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800264e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002656:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002664:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002670:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800267c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1d9      	bne.n	8002638 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3314      	adds	r3, #20
 800268a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268e:	e853 3f00 	ldrex	r3, [r3]
 8002692:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3314      	adds	r3, #20
 80026a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026b4:	e841 2300 	strex	r3, r2, [r1]
 80026b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80026ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e1      	bne.n	8002684 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3314      	adds	r3, #20
 80026c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ca:	e853 3f00 	ldrex	r3, [r3]
 80026ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3314      	adds	r3, #20
 80026e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026ec:	e841 2300 	strex	r3, r2, [r1]
 80026f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e3      	bne.n	80026c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	330c      	adds	r3, #12
 800270c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002710:	e853 3f00 	ldrex	r3, [r3]
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002718:	f023 0310 	bic.w	r3, r3, #16
 800271c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800272a:	65ba      	str	r2, [r7, #88]	; 0x58
 800272c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e3      	bne.n	8002706 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fb75 	bl	8000e32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002756:	b29b      	uxth	r3, r3
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	b29b      	uxth	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8bf 	bl	80028e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002764:	e09c      	b.n	80028a0 <HAL_UART_IRQHandler+0x518>
 8002766:	bf00      	nop
 8002768:	080029bd 	.word	0x080029bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002774:	b29b      	uxth	r3, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 808e 	beq.w	80028a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8089 	beq.w	80028a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	e853 3f00 	ldrex	r3, [r3]
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027b6:	647a      	str	r2, [r7, #68]	; 0x44
 80027b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e3      	bne.n	8002792 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3314      	adds	r3, #20
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	623b      	str	r3, [r7, #32]
   return(result);
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3314      	adds	r3, #20
 80027ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027ee:	633a      	str	r2, [r7, #48]	; 0x30
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e3      	bne.n	80027ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0310 	bic.w	r3, r3, #16
 8002826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002834:	61fa      	str	r2, [r7, #28]
 8002836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	69b9      	ldr	r1, [r7, #24]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	617b      	str	r3, [r7, #20]
   return(result);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e3      	bne.n	8002810 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800284e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f844 	bl	80028e2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800285a:	e023      	b.n	80028a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800285c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_UART_IRQHandler+0x4f4>
 8002868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f8b5 	bl	80029e4 <UART_Transmit_IT>
    return;
 800287a:	e014      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <HAL_UART_IRQHandler+0x51e>
 8002888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f8f4 	bl	8002a82 <UART_EndTransmit_IT>
    return;
 800289a:	e004      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800289c:	bf00      	nop
 800289e:	e002      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80028a4:	bf00      	nop
  }
}
 80028a6:	37e8      	adds	r7, #232	; 0xe8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b095      	sub	sp, #84	; 0x54
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290a:	e853 3f00 	ldrex	r3, [r3]
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002920:	643a      	str	r2, [r7, #64]	; 0x40
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002924:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002926:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002928:	e841 2300 	strex	r3, r2, [r1]
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e5      	bne.n	8002900 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	e853 3f00 	ldrex	r3, [r3]
 8002942:	61fb      	str	r3, [r7, #28]
   return(result);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	64bb      	str	r3, [r7, #72]	; 0x48
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3314      	adds	r3, #20
 8002952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002954:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800295a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800295c:	e841 2300 	strex	r3, r2, [r1]
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e5      	bne.n	8002934 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	2b01      	cmp	r3, #1
 800296e:	d119      	bne.n	80029a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f023 0310 	bic.w	r3, r3, #16
 8002986:	647b      	str	r3, [r7, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002990:	61ba      	str	r2, [r7, #24]
 8002992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	6979      	ldr	r1, [r7, #20]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	613b      	str	r3, [r7, #16]
   return(result);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e5      	bne.n	8002970 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029b2:	bf00      	nop
 80029b4:	3754      	adds	r7, #84	; 0x54
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff ff7a 	bl	80028d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b21      	cmp	r3, #33	; 0x21
 80029f6:	d13e      	bne.n	8002a76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a00:	d114      	bne.n	8002a2c <UART_Transmit_IT+0x48>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d110      	bne.n	8002a2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	1c9a      	adds	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	621a      	str	r2, [r3, #32]
 8002a2a:	e008      	b.n	8002a3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	1c59      	adds	r1, r3, #1
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6211      	str	r1, [r2, #32]
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
  }
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ff02 	bl	80028ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b08c      	sub	sp, #48	; 0x30
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b22      	cmp	r3, #34	; 0x22
 8002ac4:	f040 80ae 	bne.w	8002c24 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d117      	bne.n	8002b02 <UART_Receive_IT+0x50>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d113      	bne.n	8002b02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	1c9a      	adds	r2, r3, #2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
 8002b00:	e026      	b.n	8002b50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b14:	d007      	beq.n	8002b26 <UART_Receive_IT+0x74>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <UART_Receive_IT+0x82>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e008      	b.n	8002b46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d15d      	bne.n	8002c20 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0220 	bic.w	r2, r2, #32
 8002b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d135      	bne.n	8002c16 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f023 0310 	bic.w	r3, r3, #16
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	623a      	str	r2, [r7, #32]
 8002bd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd4:	69f9      	ldr	r1, [r7, #28]
 8002bd6:	6a3a      	ldr	r2, [r7, #32]
 8002bd8:	e841 2300 	strex	r3, r2, [r1]
 8002bdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e5      	bne.n	8002bb0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d10a      	bne.n	8002c08 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff fe67 	bl	80028e2 <HAL_UARTEx_RxEventCallback>
 8002c14:	e002      	b.n	8002c1c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fe51 	bl	80028be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e002      	b.n	8002c26 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3730      	adds	r7, #48	; 0x30
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c6a:	f023 030c 	bic.w	r3, r3, #12
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <UART_SetConfig+0x114>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d103      	bne.n	8002ca0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c98:	f7fe fef6 	bl	8001a88 <HAL_RCC_GetPCLK2Freq>
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	e002      	b.n	8002ca6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ca0:	f7fe fede 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 8002ca4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	009a      	lsls	r2, r3, #2
 8002cb0:	441a      	add	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	4a22      	ldr	r2, [pc, #136]	; (8002d48 <UART_SetConfig+0x118>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	0119      	lsls	r1, r3, #4
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009a      	lsls	r2, r3, #2
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <UART_SetConfig+0x118>)
 8002cde:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2064      	movs	r0, #100	; 0x64
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	; 0x32
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfc:	4419      	add	r1, r3
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	009a      	lsls	r2, r3, #2
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <UART_SetConfig+0x118>)
 8002d16:	fba3 0302 	umull	r0, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2064      	movs	r0, #100	; 0x64
 8002d1e:	fb00 f303 	mul.w	r3, r0, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <UART_SetConfig+0x118>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	440a      	add	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40013800 	.word	0x40013800
 8002d48:	51eb851f 	.word	0x51eb851f

08002d4c <__libc_init_array>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	2600      	movs	r6, #0
 8002d50:	4d0c      	ldr	r5, [pc, #48]	; (8002d84 <__libc_init_array+0x38>)
 8002d52:	4c0d      	ldr	r4, [pc, #52]	; (8002d88 <__libc_init_array+0x3c>)
 8002d54:	1b64      	subs	r4, r4, r5
 8002d56:	10a4      	asrs	r4, r4, #2
 8002d58:	42a6      	cmp	r6, r4
 8002d5a:	d109      	bne.n	8002d70 <__libc_init_array+0x24>
 8002d5c:	f000 f822 	bl	8002da4 <_init>
 8002d60:	2600      	movs	r6, #0
 8002d62:	4d0a      	ldr	r5, [pc, #40]	; (8002d8c <__libc_init_array+0x40>)
 8002d64:	4c0a      	ldr	r4, [pc, #40]	; (8002d90 <__libc_init_array+0x44>)
 8002d66:	1b64      	subs	r4, r4, r5
 8002d68:	10a4      	asrs	r4, r4, #2
 8002d6a:	42a6      	cmp	r6, r4
 8002d6c:	d105      	bne.n	8002d7a <__libc_init_array+0x2e>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d74:	4798      	blx	r3
 8002d76:	3601      	adds	r6, #1
 8002d78:	e7ee      	b.n	8002d58 <__libc_init_array+0xc>
 8002d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7e:	4798      	blx	r3
 8002d80:	3601      	adds	r6, #1
 8002d82:	e7f2      	b.n	8002d6a <__libc_init_array+0x1e>
 8002d84:	08002de8 	.word	0x08002de8
 8002d88:	08002de8 	.word	0x08002de8
 8002d8c:	08002de8 	.word	0x08002de8
 8002d90:	08002dec 	.word	0x08002dec

08002d94 <memset>:
 8002d94:	4603      	mov	r3, r0
 8002d96:	4402      	add	r2, r0
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d100      	bne.n	8002d9e <memset+0xa>
 8002d9c:	4770      	bx	lr
 8002d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002da2:	e7f9      	b.n	8002d98 <memset+0x4>

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
